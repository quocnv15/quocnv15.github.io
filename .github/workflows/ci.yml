name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  BUNDLE_SIZE_LIMIT: '15' # KB

jobs:
  type-check:
    name: TypeScript Type Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run check:types

      - name: Upload type check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: type-check-results
          path: |
            dist/
            tsconfig.json
          retention-days: 7

  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [type-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production build
        run: npm run build:prod

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -k assets/js/main.js | cut -f1)
          echo "Bundle size: ${BUNDLE_SIZE}KB"
          if [ $BUNDLE_SIZE -gt ${{ env.BUNDLE_SIZE_LIMIT }} ]; then
            echo "‚ùå Bundle size exceeds limit of ${{ env.BUNDLE_SIZE_LIMIT }}KB"
            exit 1
          else
            echo "‚úÖ Bundle size within limit"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            assets/js/
            _site/
          retention-days: 7

  jekyll-build:
    name: Jekyll Build
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./

      - name: Build Jekyll site
        run: |
          bundle exec jekyll build
          echo "‚úÖ Jekyll build completed"

      - name: Upload Jekyll build
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-site
          path: _site/
          retention-days: 7

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [jekyll-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Jekyll build
        uses: actions/download-artifact@v4
        with:
          name: jekyll-site
          path: _site/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [jekyll-build, performance]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Jekyll build
        uses: actions/download-artifact@v4
        with:
          name: jekyll-site
          path: _site/

      - name: Deploy to Netlify Preview
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: '_site'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy preview for PR #${{ github.event.number }}"
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [jekyll-build, performance, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Jekyll build
        uses: actions/download-artifact@v4
        with:
          name: jekyll-site
          path: _site/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
          cname: quocnv15.github.io

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "üöÄ Production deployment successful!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "‚ùå Production deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: [type-check, test, build, performance, security]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Security: ${{ needs.security.result }}"

          if [[ "${{ needs.type-check.result }}" == "failure" ||
                "${{ needs.test.result }}" == "failure" ||
                "${{ needs.build.result }}" == "failure" ||
                "${{ needs.performance.result }}" == "failure" ||
                "${{ needs.security.result }}" == "failure" ]]; then
            echo "‚ùå Quality gate failed"
            exit 1
          else
            echo "‚úÖ Quality gate passed"
          fi

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()

    steps:
      - name: Notify success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "‚úÖ All checks passed successfully!"
          echo "Build completed at $(date)"

      - name: Notify failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "‚ùå Build failed!"
          echo "Please check the logs for details"
          exit 1