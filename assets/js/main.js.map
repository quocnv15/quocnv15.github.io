{
  "version": 3,
  "sources": ["../../src/ts/main.ts"],
  "sourcesContent": ["/**\n * Jekyll Blog TypeScript Frontend\n *\n * Architecture:\n * - Modular design with feature-based organization\n * - Type-safe DOM manipulation with null safety\n * - Performance optimized with lazy loading\n * - Error handling with graceful degradation\n */\n\n// Feature modules (will be added in Phase 2)\n// import { initTheme, type ThemeMode } from './modules/theme';\n// import { initNavigation } from './modules/navigation';\n// import { initCopyCode } from './modules/copy-code';\n// import { initTOC } from './modules/toc';\n// import { initSearch } from './modules/search';\n// import { initShareButtons } from './modules/share';\n\n// Utilities (will be added in Phase 2)\n// import { ready } from './modules/utils/dom';\n// import { initErrorHandling, initPerformanceMonitoring } from './modules/utils/errors';\n\n/**\n * Application configuration interface\n */\ninterface AppConfig {\n  theme: 'light' | 'dark' | 'system';\n  searchEnabled: boolean;\n  tocEnabled: boolean;\n  copyCodeEnabled: boolean;\n  shareButtonsEnabled: boolean;\n  isPost: boolean;\n  isHomePage: boolean;\n  environment: 'development' | 'production';\n}\n\n/**\n * Get configuration from page data or environment\n */\nconst getAppConfig = (): AppConfig => {\n  const script = document.querySelector<HTMLScriptElement>('#site-config');\n\n  if (script?.textContent) {\n    try {\n      return JSON.parse(script.textContent);\n    } catch (error) {\n      console.warn('Failed to parse site config:', error);\n    }\n  }\n\n  // Fallback configuration based on DOM inspection\n  return {\n    theme: 'system',\n    searchEnabled: !!document.querySelector('#search-input'),\n    tocEnabled: document.body.classList.contains('post'),\n    copyCodeEnabled: !!document.querySelector('pre code'),\n    shareButtonsEnabled: !!document.querySelector('.share-links'),\n    isPost: document.body.classList.contains('post'),\n    isHomePage: document.body.classList.contains('home'),\n    environment: (process.env.NODE_ENV as AppConfig['environment']) || 'development'\n  };\n};\n\n/**\n * Initialize application with error handling\n */\nconst initializeApp = async (): Promise<void> => {\n  const config = getAppConfig();\n\n  try {\n    // Initialize core infrastructure (Phase 2)\n    // initErrorHandling();\n    // initPerformanceMonitoring();\n\n    console.log('\uD83D\uDE80 Jekyll TypeScript Frontend Starting...');\n    console.log('\uD83D\uDCCA Config:', config);\n\n    // Initialize features based on configuration (Phase 2)\n    // initTheme(config.theme);\n    // initNavigation();\n\n    // if (config.copyCodeEnabled) {\n    //   await initCopyCode();\n    // }\n\n    // if (config.tocEnabled && config.isPost) {\n    //   await initTOC();\n    // }\n\n    // if (config.searchEnabled) {\n    //   await initSearch();\n    // }\n\n    // if (config.shareButtonsEnabled && config.isPost) {\n    //   await initShareButtons();\n    // }\n\n    // Mark as ready\n    document.body.classList.add('js-enabled');\n    document.body.classList.remove('js-loading');\n\n    console.log('\u2705 Jekyll TypeScript frontend initialized successfully (Phase 1 complete)');\n\n  } catch (error) {\n    console.error('\u274C Failed to initialize app:', error);\n\n    // Fallback behavior\n    document.body.classList.add('js-fallback');\n    document.body.classList.remove('js-loading');\n\n    // Still enable basic functionality (Phase 2)\n    // try {\n    //   initTheme(config.theme);\n    //   initNavigation();\n    // } catch (fallbackError) {\n    //   console.error('\u274C Even fallback initialization failed:', fallbackError);\n    // }\n  }\n};\n\n/**\n * Application bootstrap\n */\nconst ready = (callback: () => void): void => {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', callback);\n  } else {\n    callback();\n  }\n};\n\nready(() => {\n  document.body.classList.add('js-loading');\n  initializeApp();\n});\n\n// Export for external use and testing\nexport { initializeApp, getAppConfig };\nexport type { AppConfig };"],
  "mappings": ";AAuCA,IAAM,eAAe,MAAiB;AACpC,QAAM,SAAS,SAAS,cAAiC,cAAc;AAEvE,MAAI,iCAAQ,aAAa;AACvB,QAAI;AACF,aAAO,KAAK,MAAM,OAAO,WAAW;AAAA,IACtC,SAAS,OAAO;AACd,cAAQ,KAAK,gCAAgC,KAAK;AAAA,IACpD;AAAA,EACF;AAGA,SAAO;AAAA,IACL,OAAO;AAAA,IACP,eAAe,CAAC,CAAC,SAAS,cAAc,eAAe;AAAA,IACvD,YAAY,SAAS,KAAK,UAAU,SAAS,MAAM;AAAA,IACnD,iBAAiB,CAAC,CAAC,SAAS,cAAc,UAAU;AAAA,IACpD,qBAAqB,CAAC,CAAC,SAAS,cAAc,cAAc;AAAA,IAC5D,QAAQ,SAAS,KAAK,UAAU,SAAS,MAAM;AAAA,IAC/C,YAAY,SAAS,KAAK,UAAU,SAAS,MAAM;AAAA,IACnD,aAAc;AAAA,EAChB;AACF;AAKA,IAAM,gBAAgB,YAA2B;AAC/C,QAAM,SAAS,aAAa;AAE5B,MAAI;AAKF,YAAQ,IAAI,kDAA2C;AACvD,YAAQ,IAAI,qBAAc,MAAM;AAuBhC,aAAS,KAAK,UAAU,IAAI,YAAY;AACxC,aAAS,KAAK,UAAU,OAAO,YAAY;AAE3C,YAAQ,IAAI,+EAA0E;AAAA,EAExF,SAAS,OAAO;AACd,YAAQ,MAAM,oCAA+B,KAAK;AAGlD,aAAS,KAAK,UAAU,IAAI,aAAa;AACzC,aAAS,KAAK,UAAU,OAAO,YAAY;AAAA,EAS7C;AACF;AAKA,IAAM,QAAQ,CAAC,aAA+B;AAC5C,MAAI,SAAS,eAAe,WAAW;AACrC,aAAS,iBAAiB,oBAAoB,QAAQ;AAAA,EACxD,OAAO;AACL,aAAS;AAAA,EACX;AACF;AAEA,MAAM,MAAM;AACV,WAAS,KAAK,UAAU,IAAI,YAAY;AACxC,gBAAc;AAChB,CAAC;",
  "names": []
}
