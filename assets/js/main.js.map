{
  "version": 3,
  "sources": ["../../src/ts/core/cleanup-manager.ts", "../../src/ts/modules/utils/dom.ts", "../../src/ts/core/performance-monitor.ts", "../../src/ts/core/state-manager.ts", "../../src/ts/core/state-persistence.ts", "../../src/ts/core/state-debug-tools.ts", "../../src/ts/core/app-state.ts", "../../src/ts/modules/theme.ts", "../../src/ts/services/config.service.ts", "../../src/ts/modules/navigation.ts", "../../src/ts/modules/copy-code.ts", "../../src/ts/modules/toc.ts", "../../src/ts/core/service-factory.ts", "../../src/ts/core/plugin-system.ts", "../../src/ts/components/component-registry.ts", "../../src/ts/main.ts"],
  "sourcesContent": ["/**\n * Cleanup Manager - Memory Management Foundation\n *\n * Provides centralized cleanup management for preventing memory leaks.\n * This is a singleton service that tracks all cleanup tasks and ensures\n * they are executed when the application is destroyed or when explicitly called.\n *\n * @example\n * ```typescript\n * const cleanup = CleanupManager.getInstance();\n *\n * // Register event listener cleanup\n * const removeListener = cleanup.register(() => {\n *   element.removeEventListener('click', handler);\n * });\n *\n * // Register async cleanup\n * cleanup.register(async () => {\n *   await someAsyncCleanup();\n * });\n *\n * // Execute all cleanup tasks\n * cleanup.cleanup();\n * ```\n */\n\n// Define disposable types locally to avoid circular imports\nexport interface Disposable {\n  dispose(): void | Promise<void>;\n}\n\nexport interface AsyncDisposable {\n  dispose(): Promise<void>;\n}\n\n/**\n * Cleanup task that can be either synchronous or asynchronous\n */\nexport type CleanupTask = (() => void) | (() => Promise<void>) | Disposable | AsyncDisposable;\n\n/**\n * Cleanup task metadata for tracking and debugging\n */\nexport interface CleanupTaskInfo {\n  id: string;\n  task: CleanupTask;\n  description?: string;\n  priority: number;\n  createdAt: Date;\n  executedAt?: Date;\n  error?: Error;\n}\n\n/**\n * Cleanup manager configuration\n */\nexport interface CleanupManagerConfig {\n  autoCleanupOnUnload: boolean;\n  logCleanupActivity: boolean;\n  maxTasks: number;\n  defaultPriority: number;\n}\n\n/**\n * Global cleanup manager singleton\n * Ensures proper cleanup of resources, event listeners, and memory references\n */\nexport class CleanupManager {\n  private static instance: CleanupManager | null = null;\n  private tasks: Map<string, CleanupTaskInfo> = new Map();\n  private isDestroyed: boolean = false;\n  private config: CleanupManagerConfig;\n\n  /**\n   * Private constructor for singleton pattern\n   */\n  private constructor(config: Partial<CleanupManagerConfig> = {}) {\n    this.config = {\n      autoCleanupOnUnload: true,\n      logCleanupActivity: process.env.NODE_ENV === 'development',\n      maxTasks: 1000,\n      defaultPriority: 0,\n      ...config\n    };\n\n    // Setup automatic cleanup on page unload\n    if (this.config.autoCleanupOnUnload && typeof window !== 'undefined') {\n      this.setupAutoCleanup();\n    }\n\n    if (this.config.logCleanupActivity) {\n      console.log('\uD83E\uDDF9 CleanupManager initialized');\n    }\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(config?: Partial<CleanupManagerConfig>): CleanupManager {\n    if (!CleanupManager.instance) {\n      CleanupManager.instance = new CleanupManager(config);\n    }\n    return CleanupManager.instance;\n  }\n\n  /**\n   * Reset singleton instance (useful for testing)\n   */\n  public static resetInstance(): void {\n    if (CleanupManager.instance) {\n      CleanupManager.instance.destroy();\n    }\n    CleanupManager.instance = null;\n  }\n\n  /**\n   * Register a cleanup task\n   *\n   * @param task - Cleanup function or disposable object\n   * @param options - Registration options\n   * @returns Function to unregister the task\n   */\n  public register(\n    task: CleanupTask,\n    options: {\n      id?: string;\n      description?: string;\n      priority?: number;\n    } = {}\n  ): () => void {\n    if (this.isDestroyed) {\n      console.warn('CleanupManager: Cannot register task after destruction');\n      return () => {};\n    }\n\n    const id = options.id || this.generateTaskId();\n    const priority = options.priority ?? this.config.defaultPriority;\n\n    // Check if task already exists\n    if (this.tasks.has(id)) {\n      console.warn(`CleanupManager: Task with id '${id}' already exists`);\n      return () => this.unregister(id);\n    }\n\n    // Check maximum tasks limit\n    if (this.tasks.size >= this.config.maxTasks) {\n      console.warn('CleanupManager: Maximum tasks limit reached');\n      // Remove oldest low-priority tasks\n      this.removeOldestTasks(1);\n    }\n\n    const taskInfo: CleanupTaskInfo = {\n      id,\n      task,\n      ...(options.description && { description: options.description }),\n      priority,\n      createdAt: new Date()\n    };\n\n    this.tasks.set(id, taskInfo);\n\n    if (this.config.logCleanupActivity) {\n      console.log(`\uD83E\uDDF9 Cleanup task registered: ${id} ${options.description ? `- ${options.description}` : ''}`);\n    }\n\n    // Return unregister function\n    return () => this.unregister(id);\n  }\n\n  /**\n   * Unregister a cleanup task by ID\n   */\n  public unregister(id: string): boolean {\n    const removed = this.tasks.delete(id);\n    if (removed && this.config.logCleanupActivity) {\n      console.log(`\uD83E\uDDF9 Cleanup task unregistered: ${id}`);\n    }\n    return removed;\n  }\n\n  /**\n   * Execute all cleanup tasks\n   *\n   * @param options - Execution options\n   * @returns Promise that resolves when all tasks are complete\n   */\n  public async cleanup(options: {\n    priority?: number;\n    reverse?: boolean;\n    errors?: 'throw' | 'log' | 'ignore';\n  } = {}): Promise<void> {\n    if (this.isDestroyed) {\n      console.warn('CleanupManager: Already destroyed');\n      return;\n    }\n\n    const {\n      priority,\n      reverse = false,\n      errors = 'log'\n    } = options;\n\n    const tasks = this.getTasksForCleanup(priority, reverse);\n\n    if (this.config.logCleanupActivity) {\n      console.log(`\uD83E\uDDF9 Executing ${tasks.length} cleanup tasks`);\n    }\n\n    const results = await Promise.allSettled(\n      tasks.map(async (taskInfo) => this.executeTask(taskInfo, errors))\n    );\n\n    // Handle errors based on error strategy\n    const failures = results.filter(result => result.status === 'fulfilled' && !result.value);\n    const exceptions = results.filter(result => result.status === 'rejected');\n\n    if (failures.length > 0) {\n      console.warn(`\uD83E\uDDF9 ${failures.length} cleanup tasks failed`);\n    }\n\n    if (exceptions.length > 0 && errors === 'throw') {\n      throw new Error(`${exceptions.length} cleanup tasks threw exceptions`);\n    }\n\n    if (this.config.logCleanupActivity) {\n      console.log(`\uD83E\uDDF9 Cleanup completed: ${results.length - failures.length - exceptions.length} successful, ${failures.length} failed, ${exceptions.length} exceptions`);\n    }\n  }\n\n  /**\n   * Execute a single cleanup task\n   */\n  private async executeTask(\n    taskInfo: CleanupTaskInfo,\n    errorStrategy: 'throw' | 'log' | 'ignore'\n  ): Promise<boolean> {\n    const { id, task } = taskInfo;\n\n    try {\n      taskInfo.executedAt = new Date();\n\n      if (this.isDisposable(task)) {\n        if ('dispose' in task && typeof task.dispose === 'function') {\n          await task.dispose();\n        }\n      } else if (typeof task === 'function') {\n        const result = task();\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n\n      return true;\n    } catch (error) {\n      taskInfo.error = error instanceof Error ? error : new Error(String(error));\n\n      if (errorStrategy === 'throw') {\n        throw error;\n      } else if (errorStrategy === 'log') {\n        console.error(`\uD83E\uDDF9 Cleanup task '${id}' failed:`, error);\n      }\n\n      return false;\n    }\n  }\n\n  /**\n   * Check if object is disposable\n   */\n  private isDisposable(obj: any): obj is Disposable | AsyncDisposable {\n    return obj && typeof obj === 'object' && 'dispose' in obj;\n  }\n\n  /**\n   * Get tasks for cleanup, sorted by priority\n   */\n  private getTasksForCleanup(\n    priority?: number,\n    reverse: boolean = false\n  ): CleanupTaskInfo[] {\n    let tasks = Array.from(this.tasks.values());\n\n    // Filter by priority if specified\n    if (priority !== undefined) {\n      tasks = tasks.filter(task => task.priority >= priority);\n    }\n\n    // Sort by priority (higher priority first) and creation time\n    tasks.sort((a, b) => {\n      if (a.priority !== b.priority) {\n        return reverse ? a.priority - b.priority : b.priority - a.priority;\n      }\n      return reverse ? b.createdAt.getTime() - a.createdAt.getTime() : a.createdAt.getTime() - b.createdAt.getTime();\n    });\n\n    return tasks;\n  }\n\n  /**\n   * Remove oldest tasks to make room for new ones\n   */\n  private removeOldestTasks(count: number): void {\n    const tasks = Array.from(this.tasks.entries())\n      .sort(([, a], [, b]) => a.createdAt.getTime() - b.createdAt.getTime())\n      .slice(0, count);\n\n    for (const [id] of tasks) {\n      this.tasks.delete(id);\n      if (this.config.logCleanupActivity) {\n        console.log(`\uD83E\uDDF9 Removed old cleanup task: ${id}`);\n      }\n    }\n  }\n\n  /**\n   * Generate unique task ID\n   */\n  private generateTaskId(): string {\n    return `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Setup automatic cleanup on page unload\n   */\n  private setupAutoCleanup(): void {\n    const cleanupHandler = () => {\n      // Execute only synchronous cleanup on unload\n      const syncTasks = Array.from(this.tasks.values())\n        .filter(taskInfo => {\n          const task = taskInfo.task;\n          if (this.isDisposable(task)) {\n            return 'dispose' in task && typeof task.dispose === 'function';\n          }\n          return typeof task === 'function';\n        });\n\n      syncTasks.forEach(taskInfo => {\n        try {\n          this.executeTask(taskInfo, 'log');\n        } catch (error) {\n          console.error('Auto-cleanup error:', error);\n        }\n      });\n    };\n\n    // Register for multiple unload events\n    window.addEventListener('unload', cleanupHandler, { once: true });\n    window.addEventListener('beforeunload', cleanupHandler, { once: true });\n\n    // Also cleanup on pagehide for better support in modern browsers\n    window.addEventListener('pagehide', cleanupHandler, { once: true });\n  }\n\n  /**\n   * Get cleanup statistics\n   */\n  public getStats(): {\n    totalTasks: number;\n    tasksByPriority: Record<number, number>;\n    oldestTask: Date | null;\n    newestTask: Date | null;\n    isDestroyed: boolean;\n  } {\n    const tasks = Array.from(this.tasks.values());\n\n    const tasksByPriority: Record<number, number> = {};\n    tasks.forEach(task => {\n      tasksByPriority[task.priority] = (tasksByPriority[task.priority] || 0) + 1;\n    });\n\n    const dates = tasks.map(task => task.createdAt);\n    const oldestTask = dates.length > 0 ? new Date(Math.min(...dates.map(d => d.getTime()))) : null;\n    const newestTask = dates.length > 0 ? new Date(Math.max(...dates.map(d => d.getTime()))) : null;\n\n    return {\n      totalTasks: tasks.length,\n      tasksByPriority,\n      oldestTask,\n      newestTask,\n      isDestroyed: this.isDestroyed\n    };\n  }\n\n  /**\n   * List all registered tasks\n   */\n  public listTasks(): Array<{\n    id: string;\n    description?: string;\n    priority: number;\n    createdAt: Date;\n    executedAt?: Date;\n    hasError: boolean;\n  }> {\n    return Array.from(this.tasks.values()).map(task => {\n      const result: {\n        id: string;\n        description?: string;\n        priority: number;\n        createdAt: Date;\n        executedAt?: Date;\n        hasError: boolean;\n      } = {\n        id: task.id,\n        priority: task.priority,\n        createdAt: task.createdAt,\n        hasError: !!task.error\n      };\n\n      if (task.description !== undefined) {\n        result.description = task.description;\n      }\n\n      if (task.executedAt !== undefined) {\n        result.executedAt = task.executedAt;\n      }\n\n      return result;\n    });\n  }\n\n  /**\n   * Clear all tasks without executing them\n   */\n  public clear(): void {\n    const count = this.tasks.size;\n    this.tasks.clear();\n\n    if (this.config.logCleanupActivity) {\n      console.log(`\uD83E\uDDF9 Cleared ${count} cleanup tasks without execution`);\n    }\n  }\n\n  /**\n   * Destroy the cleanup manager\n   */\n  public destroy(): void {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    this.isDestroyed = true;\n\n    // Execute cleanup tasks asynchronously but don't wait\n    this.cleanup({ errors: 'log' }).catch(error => {\n      console.error('Error during cleanup manager destruction:', error);\n    });\n\n    // Clear tasks\n    this.tasks.clear();\n\n    if (this.config.logCleanupActivity) {\n      console.log('\uD83E\uDDF9 CleanupManager destroyed');\n    }\n  }\n\n  /**\n   * Force immediate synchronous cleanup (for emergency situations)\n   */\n  public forceCleanup(): void {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    const tasks = this.getTasksForCleanup(undefined, false);\n\n    for (const taskInfo of tasks) {\n      try {\n        const task = taskInfo.task;\n\n        if (this.isDisposable(task) && typeof task.dispose === 'function') {\n          task.dispose();\n        } else if (typeof task === 'function') {\n          task(); // Execute synchronously, ignore return value\n        }\n\n        taskInfo.executedAt = new Date();\n      } catch (error) {\n        console.error(`\uD83E\uDDF9 Force cleanup error for task '${taskInfo.id}':`, error);\n        taskInfo.error = error instanceof Error ? error : new Error(String(error));\n      }\n    }\n\n    this.tasks.clear();\n    this.isDestroyed = true;\n\n    if (this.config.logCleanupActivity) {\n      console.log(`\uD83E\uDDF9 Force cleanup completed for ${tasks.length} tasks`);\n    }\n  }\n}\n\n/**\n * Create a cleanup manager instance\n * Convenience function for creating a new CleanupManager instance\n */\nexport const createCleanupManager = (config?: Partial<CleanupManagerConfig>): CleanupManager => {\n  return CleanupManager.getInstance(config);\n};\n\n/**\n * Global cleanup manager instance\n * Default instance that can be used throughout the application\n */\nexport const globalCleanup = CleanupManager.getInstance();\n\n/**\n * Utility function to register cleanup task with global instance\n */\nexport const registerCleanup = (\n  task: CleanupTask,\n  options?: {\n    id?: string;\n    description?: string;\n    priority?: number;\n  }\n): (() => void) => {\n  return globalCleanup.register(task, options);\n};\n\n/**\n * Utility function to cleanup all tasks with global instance\n */\nexport const cleanupAll = (options?: {\n  priority?: number;\n  reverse?: boolean;\n  errors?: 'throw' | 'log' | 'ignore';\n}): Promise<void> => {\n  return globalCleanup.cleanup(options);\n};", "/**\n * Type-safe DOM manipulation utilities\n *\n * Provides:\n * - Safe element querying with TypeScript generics\n * - Null-checked element access\n * - Performance-optimized DOM operations\n * - Cross-browser compatibility helpers\n * - Memory leak prevention through automatic cleanup\n */\n\nimport { registerCleanup } from '../../core/cleanup-manager';\n\n/**\n * Query selector with guaranteed return type\n * Throws error if element not found - use when element is required\n */\nexport const qs = <T extends Element = Element>(\n  selector: string,\n  parent: ParentNode = document\n): T => {\n  const element = parent.querySelector<T>(selector);\n  if (!element) {\n    throw new Error(`Required element not found: ${selector}`);\n  }\n  return element;\n};\n\n/**\n * Query selector with optional return type\n * Returns null if element not found - use when element is optional\n */\nexport const qsSafe = <T extends Element = Element>(\n  selector: string,\n  parent: ParentNode = document\n): T | null => {\n  return parent.querySelector<T>(selector);\n};\n\n/**\n * Query selector all with type safety\n */\nexport const qsa = <T extends Element = Element>(\n  selector: string,\n  parent: ParentNode = document\n): NodeListOf<T> => {\n  return parent.querySelectorAll<T>(selector);\n};\n\n/**\n * Create element with attributes and text content\n */\nexport const create = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attributes?: Record<string, string>,\n  textContent?: string\n): HTMLElementTagNameMap[K] => {\n  const element = document.createElement(tag);\n\n  if (attributes) {\n    Object.entries(attributes).forEach(([key, value]) => {\n      element.setAttribute(key, value);\n    });\n  }\n\n  if (textContent !== undefined) {\n    element.textContent = textContent;\n  }\n\n  return element;\n};\n\n/**\n * Check if DOM is ready\n */\nexport const ready = (callback: () => void): void => {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', callback);\n  } else {\n    callback();\n  }\n};\n\n/**\n * Debounce function for event handlers\n */\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): ((...args: Parameters<T>) => void) => {\n  let timeout: NodeJS.Timeout;\n\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n};\n\n/**\n * Throttle function for scroll handlers\n */\nexport const throttle = <T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): ((...args: Parameters<T>) => void) => {\n  let inThrottle: boolean;\n\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n\n/**\n * Check if element is in viewport\n */\nexport const isInViewport = (element: Element): boolean => {\n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n};\n\n/**\n * Smooth scroll to element with offset\n */\nexport const scrollToElement = (\n  element: Element,\n  offset: number = 0,\n  behavior: ScrollBehavior = 'smooth'\n): void => {\n  const elementPosition = element.getBoundingClientRect().top + window.scrollY;\n  const offsetPosition = elementPosition - offset;\n\n  window.scrollTo({\n    top: offsetPosition,\n    behavior\n  });\n};\n\n/**\n * Add event listener with cleanup function\n */\nexport const addEventListener = <K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  event: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n): (() => void) => {\n  element.addEventListener(event, handler, options);\n\n  const cleanup = () => {\n    element.removeEventListener(event, handler, options);\n  };\n\n  // Auto-register with cleanup manager for memory leak prevention\n  registerCleanup(cleanup, {\n    description: `Event listener: ${event} on ${element.tagName.toLowerCase()}${element.id ? '#' + element.id : ''}`,\n    priority: 1 // Event listeners are high priority\n  });\n\n  return cleanup;\n};\n\n/**\n * Add event listener with manual cleanup (doesn't auto-register)\n * Use when you want to manage cleanup manually\n */\nexport const addEventListenerManual = <K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  event: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n): (() => void) => {\n  element.addEventListener(event, handler, options);\n\n  return () => {\n    element.removeEventListener(event, handler, options);\n  };\n};\n\n/**\n * Get computed style value\n */\nexport const getStyle = (element: Element, property: string): string => {\n  return window.getComputedStyle(element).getPropertyValue(property);\n};\n\n/**\n * Check if CSS custom property is supported\n */\nexport const supportsCustomProperties = (): boolean => {\n  return CSS.supports('color', 'var(--test)');\n};\n\n/**\n * Load external script dynamically\n */\nexport const loadScript = (src: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n\n    script.onload = () => resolve();\n    script.onerror = () => reject(new Error(`Failed to load script: ${src}`));\n\n    document.head.appendChild(script);\n  });\n};\n\n/**\n * Create MutationObserver with automatic cleanup\n */\nexport const createMutationObserver = (\n  callback: MutationCallback,\n  options?: MutationObserverInit\n): {\n  observer: MutationObserver;\n  disconnect: () => void;\n  observe: (target: Node, options?: MutationObserverInit) => void;\n} => {\n  const observer = new MutationObserver(callback);\n\n  const disconnect = () => observer.disconnect();\n\n  // Register cleanup\n  registerCleanup(disconnect, {\n    description: 'MutationObserver',\n    priority: 2 // Observers are high priority\n  });\n\n  return {\n    observer,\n    disconnect,\n    observe: (target: Node, observeOptions?: MutationObserverInit) => {\n      observer.observe(target, observeOptions || options);\n    }\n  };\n};\n\n/**\n * Create IntersectionObserver with automatic cleanup\n */\nexport const createIntersectionObserver = (\n  callback: IntersectionObserverCallback,\n  options?: IntersectionObserverInit\n): {\n  observer: IntersectionObserver;\n  disconnect: () => void;\n  observe: (target: Element) => void;\n  unobserve: (target: Element) => void;\n} => {\n  const observer = new IntersectionObserver(callback, options);\n\n  const disconnect = () => observer.disconnect();\n\n  // Register cleanup\n  registerCleanup(disconnect, {\n    description: 'IntersectionObserver',\n    priority: 2 // Observers are high priority\n  });\n\n  return {\n    observer,\n    disconnect,\n    observe: (target: Element) => observer.observe(target),\n    unobserve: (target: Element) => observer.unobserve(target)\n  };\n};\n\n/**\n * Create ResizeObserver with automatic cleanup\n */\nexport const createResizeObserver = (\n  callback: ResizeObserverCallback\n): {\n  observer: ResizeObserver;\n  disconnect: () => void;\n  observe: (target: Element) => void;\n  unobserve: (target: Element) => void;\n} => {\n  const observer = new ResizeObserver(callback);\n\n  const disconnect = () => observer.disconnect();\n\n  // Register cleanup\n  registerCleanup(disconnect, {\n    description: 'ResizeObserver',\n    priority: 2 // Observers are high priority\n  });\n\n  return {\n    observer,\n    disconnect,\n    observe: (target: Element) => observer.observe(target),\n    unobserve: (target: Element) => observer.unobserve(target)\n  };\n};\n\n/**\n * Add interval with automatic cleanup\n */\nexport const setIntervalWithCleanup = (\n  callback: () => void,\n  delay: number,\n  description?: string\n): {\n  intervalId: ReturnType<typeof setInterval>;\n  clear: () => void;\n} => {\n  const intervalId = setInterval(callback, delay);\n\n  const clear = () => clearInterval(intervalId);\n\n  // Register cleanup\n  registerCleanup(clear, {\n    description: description || `Interval: ${delay}ms`,\n    priority: 1 // Intervals are high priority\n  });\n\n  return {\n    intervalId,\n    clear\n  };\n};\n\n/**\n * Add timeout with automatic cleanup\n */\nexport const setTimeoutWithCleanup = (\n  callback: () => void,\n  delay: number,\n  description?: string\n): {\n  timeoutId: ReturnType<typeof setTimeout>;\n  clear: () => void;\n} => {\n  const timeoutId = setTimeout(callback, delay);\n\n  const clear = () => clearTimeout(timeoutId);\n\n  // Register cleanup with lower priority since timeouts are often one-time\n  registerCleanup(clear, {\n    description: description || `Timeout: ${delay}ms`,\n    priority: 0 // Timeouts are lower priority\n  });\n\n  return {\n    timeoutId,\n    clear\n  };\n};\n\n/**\n * Add multiple event listeners to an element with batch cleanup\n */\nexport const addEventListeners = (\n  element: HTMLElement,\n  events: Array<{\n    event: keyof HTMLElementEventMap;\n    handler: (event: Event) => void;\n    options?: boolean | AddEventListenerOptions;\n  }>\n): (() => void) => {\n  const cleanupFunctions = events.map(({ event, handler, options }) =>\n    addEventListener(element, event, handler as any, options)\n  );\n\n  const cleanupAll = () => {\n    cleanupFunctions.forEach(cleanup => cleanup());\n  };\n\n  // Register batch cleanup\n  registerCleanup(cleanupAll, {\n    description: `Multiple event listeners on ${element.tagName.toLowerCase()}${element.id ? '#' + element.id : ''}`,\n    priority: 1\n  });\n\n  return cleanupAll;\n};\n\n/**\n * Create DOM element with automatic cleanup of children\n */\nexport const createWithCleanup = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attributes?: Record<string, string>,\n  textContent?: string,\n  cleanupChildren: boolean = true\n): HTMLElementTagNameMap[K] => {\n  const element = document.createElement(tag);\n\n  if (attributes) {\n    Object.entries(attributes).forEach(([key, value]) => {\n      element.setAttribute(key, value);\n    });\n  }\n\n  if (textContent !== undefined) {\n    element.textContent = textContent;\n  }\n\n  if (cleanupChildren) {\n    // Register cleanup to remove element from DOM\n    registerCleanup(() => {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    }, {\n      description: `Remove element: ${tag.toLowerCase()}${element.id ? '#' + element.id : ''}`,\n      priority: 0 // Element removal is lower priority\n    });\n  }\n\n  return element;\n};", "/**\n * Performance Monitoring System\n *\n * Provides comprehensive performance monitoring for the Jekyll-TypeScript application.\n * Tracks Core Web Vitals, bundle metrics, and custom performance indicators.\n */\n\n// ============================================================================\n// Core Web Vitals Types\n// ============================================================================\n\nexport interface CoreWebVitals {\n  lcp: number; // Largest Contentful Paint\n  fid: number; // First Input Delay\n  cls: number; // Cumulative Layout Shift\n  fcp: number; // First Contentful Paint\n  ttfb: number; // Time to First Byte\n}\n\nexport interface PerformanceMetrics {\n  bundle: BundleMetrics;\n  runtime: RuntimeMetrics;\n  vitals: CoreWebVitals;\n  custom: Record<string, number>;\n}\n\nexport interface BundleMetrics {\n  size: {\n    raw: number; // bytes\n    gzipped: number; // bytes\n    brotli: number; // bytes\n  };\n  loadTime: number; // milliseconds\n  parseTime: number; // milliseconds\n  modules: number; // count of modules\n}\n\nexport interface RuntimeMetrics {\n  initTime: number; // application initialization time\n  renderTime: number; // initial render time\n  interactiveTime: number; // time to interactive\n  memoryUsage: number; // MB\n  domNodes: number; // DOM node count\n}\n\n// ============================================================================\n// Performance Monitor Implementation\n// ============================================================================\n\nexport class PerformanceMonitor {\n  private metrics: PerformanceMetrics;\n  private observers: PerformanceObserver[] = [];\n  private startTime: number = 0;\n  private config: PerformanceMonitorConfig;\n\n  constructor(config: PerformanceMonitorConfig = {}) {\n    this.config = {\n      enabled: true,\n      collectVitals: true,\n      collectRuntime: true,\n      collectBundle: true,\n      reportingEndpoint: null,\n      reportInterval: 30000, // 30 seconds\n      ...config\n    };\n\n    this.metrics = this.initializeMetrics();\n  }\n\n  /**\n   * Initialize performance monitoring\n   */\n  public init(): void {\n    if (!this.config.enabled) {\n      console.log('\uD83D\uDCCA Performance monitoring disabled');\n      return;\n    }\n\n    this.startTime = performance.now();\n    console.log('\uD83D\uDCCA Performance monitoring initialized');\n\n    // Start collecting metrics\n    if (this.config.collectVitals) {\n      this.setupVitalsCollection();\n    }\n\n    if (this.config.collectRuntime) {\n      this.setupRuntimeCollection();\n    }\n\n    if (this.config.collectBundle) {\n      this.collectBundleMetrics();\n    }\n\n    // Set up periodic reporting\n    this.setupPeriodicReporting();\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  public getMetrics(): PerformanceMetrics {\n    // Update runtime metrics before returning\n    this.updateRuntimeMetrics();\n    return { ...this.metrics };\n  }\n\n  /**\n   * Record a custom performance metric\n   */\n  public recordMetric(name: string, value: number): void {\n    this.metrics.custom[name] = value;\n    console.log(`\uD83D\uDCCA Custom metric recorded: ${name} = ${value}ms`);\n  }\n\n  /**\n   * Mark a performance point\n   */\n  public mark(name: string): void {\n    if (performance.mark) {\n      performance.mark(name);\n      console.log(`\uD83D\uDCCA Performance mark: ${name}`);\n    }\n  }\n\n  /**\n   * Measure time between marks\n   */\n  public measure(name: string, startMark: string, endMark?: string): number {\n    if (performance.measure) {\n      try {\n        performance.measure(name, startMark, endMark);\n        const entries = performance.getEntriesByName(name, 'measure');\n        if (entries.length > 0) {\n          const lastEntry = entries[entries.length - 1];\n          const duration = lastEntry?.duration ?? 0;\n          console.log(`\uD83D\uDCCA Performance measure: ${name} = ${duration.toFixed(2)}ms`);\n          return duration;\n        }\n      } catch (error) {\n        console.warn(`\u26A0\uFE0F Performance measure failed for ${name}:`, error);\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Generate performance report\n   */\n  public generateReport(): PerformanceReport {\n    const metrics = this.getMetrics();\n    const timestamp = Date.now();\n\n    return {\n      timestamp,\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      metrics,\n      score: this.calculatePerformanceScore(metrics),\n      recommendations: this.generateRecommendations(metrics)\n    };\n  }\n\n  /**\n   * Cleanup performance monitoring\n   */\n  public destroy(): void {\n    // Disconnect all observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n\n    console.log('\uD83D\uDCCA Performance monitoring destroyed');\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  private initializeMetrics(): PerformanceMetrics {\n    return {\n      bundle: {\n        size: { raw: 0, gzipped: 0, brotli: 0 },\n        loadTime: 0,\n        parseTime: 0,\n        modules: 0\n      },\n      runtime: {\n        initTime: 0,\n        renderTime: 0,\n        interactiveTime: 0,\n        memoryUsage: 0,\n        domNodes: 0\n      },\n      vitals: {\n        lcp: 0,\n        fid: 0,\n        cls: 0,\n        fcp: 0,\n        ttfb: 0\n      },\n      custom: {}\n    };\n  }\n\n  private setupVitalsCollection(): void {\n    // Largest Contentful Paint (LCP)\n    this.observePerformanceObserver('largest-contentful-paint', (entries) => {\n      const lastEntry = entries[entries.length - 1];\n      this.metrics.vitals.lcp = lastEntry.startTime;\n      console.log(`\uD83D\uDCCA LCP: ${lastEntry.startTime.toFixed(2)}ms`);\n    });\n\n    // First Input Delay (FID)\n    this.observePerformanceObserver('first-input', (entries) => {\n      const firstEntry = entries[0];\n      if (firstEntry) {\n        this.metrics.vitals.fid = firstEntry.processingStart - firstEntry.startTime;\n        console.log(`\uD83D\uDCCA FID: ${this.metrics.vitals.fid.toFixed(2)}ms`);\n      }\n    });\n\n    // Cumulative Layout Shift (CLS)\n    let clsValue = 0;\n    this.observePerformanceObserver('layout-shift', (entries) => {\n      for (const entry of entries) {\n        if (!(entry as any).hadRecentInput) {\n          clsValue += (entry as any).value;\n        }\n      }\n      this.metrics.vitals.cls = clsValue;\n      console.log(`\uD83D\uDCCA CLS: ${clsValue.toFixed(4)}`);\n    });\n\n    // First Contentful Paint (FCP)\n    this.observePerformanceObserver('paint', (entries) => {\n      const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');\n      if (fcpEntry) {\n        this.metrics.vitals.fcp = fcpEntry.startTime;\n        console.log(`\uD83D\uDCCA FCP: ${fcpEntry.startTime.toFixed(2)}ms`);\n      }\n    });\n\n    // Time to First Byte (TTFB)\n    if (performance.getEntriesByType) {\n      const navigationEntries = performance.getEntriesByType('navigation') as PerformanceNavigationTiming[];\n      if (navigationEntries.length > 0) {\n        const navEntry = navigationEntries[0];\n        if (navEntry?.responseStart && navEntry?.requestStart) {\n          this.metrics.vitals.ttfb = navEntry.responseStart - navEntry.requestStart;\n          console.log(`\uD83D\uDCCA TTFB: ${this.metrics.vitals.ttfb.toFixed(2)}ms`);\n        }\n      }\n    }\n  }\n\n  private observePerformanceObserver(type: string, callback: (entries: any[]) => void): void {\n    if (!('PerformanceObserver' in window)) {\n      return;\n    }\n\n    try {\n      const observer = new PerformanceObserver((list) => {\n        callback(list.getEntries());\n      });\n\n      observer.observe({ type, buffered: true });\n      this.observers.push(observer);\n    } catch (error) {\n      console.warn(`\u26A0\uFE0F Failed to observe ${type}:`, error);\n    }\n  }\n\n  private setupRuntimeCollection(): void {\n    // Initial runtime metrics\n    setTimeout(() => {\n      this.updateRuntimeMetrics();\n    }, 0);\n\n    // Monitor memory usage (if available)\n    if ('memory' in performance) {\n      setInterval(() => {\n        this.metrics.runtime.memoryUsage = (performance as any).memory.usedJSHeapSize / 1024 / 1024;\n      }, 5000);\n    }\n\n    // Monitor DOM nodes\n    const observer = new MutationObserver(() => {\n      this.metrics.runtime.domNodes = document.querySelectorAll('*').length;\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    this.observers.push(observer as any);\n  }\n\n  private updateRuntimeMetrics(): void {\n    // Calculate initialization time\n    this.metrics.runtime.initTime = performance.now() - this.startTime;\n\n    // Time to interactive (approximate)\n    if (performance.getEntriesByType) {\n      const entries = performance.getEntriesByType('navigation') as PerformanceNavigationTiming[];\n      if (entries.length > 0) {\n        const navEntry = entries[0];\n        if (navEntry?.loadEventEnd && navEntry?.loadEventStart) {\n          this.metrics.runtime.interactiveTime = navEntry.loadEventEnd - navEntry.loadEventStart;\n        }\n      }\n    }\n  }\n\n  private collectBundleMetrics(): void {\n    // Try to get bundle size from script tags\n    const scripts = document.querySelectorAll('script[src]');\n    let totalSize = 0;\n    let moduleCount = 0;\n\n    scripts.forEach(script => {\n      if ((script as HTMLScriptElement).src?.includes('/assets/js/main.js')) {\n        moduleCount++;\n        // This would typically be fetched from the server\n        // For now, we'll use an estimated value\n        totalSize += 64000; // 64KB estimated\n      }\n    });\n\n    this.metrics.bundle.size.raw = totalSize;\n    this.metrics.bundle.modules = moduleCount;\n\n    // Bundle load time\n    if (performance.getEntriesByType) {\n      const entries = performance.getEntriesByType('resource');\n      const bundleEntry = entries.find(entry =>\n        entry.name.includes('/assets/js/main.js')\n      );\n\n      if (bundleEntry && 'responseEnd' in bundleEntry && 'requestStart' in bundleEntry) {\n        const bundleTiming = bundleEntry as any;\n        this.metrics.bundle.loadTime = bundleTiming.responseEnd - bundleTiming.requestStart;\n      }\n    }\n\n    console.log(`\uD83D\uDCCA Bundle metrics collected: ${totalSize} bytes, ${moduleCount} modules`);\n  }\n\n  private setupPeriodicReporting(): void {\n    if (!this.config.reportingEndpoint) {\n      return;\n    }\n\n    setInterval(() => {\n      this.sendReport();\n    }, this.config.reportInterval);\n  }\n\n  private sendReport(): void {\n    if (!this.config.reportingEndpoint) {\n      return;\n    }\n\n    const report = this.generateReport();\n\n    // Send to analytics endpoint\n    fetch(this.config.reportingEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(report)\n    }).catch(error => {\n      console.warn('\u26A0\uFE0F Failed to send performance report:', error);\n    });\n  }\n\n  private calculatePerformanceScore(metrics: PerformanceMetrics): number {\n    let score = 100;\n\n    // Deduct points for poor vitals\n    if (metrics.vitals.lcp > 2500) score -= 20;\n    if (metrics.vitals.fid > 100) score -= 15;\n    if (metrics.vitals.cls > 0.1) score -= 15;\n    if (metrics.vitals.fcp > 1800) score -= 15;\n    if (metrics.vitals.ttfb > 800) score -= 10;\n\n    // Deduct points for large bundle\n    if (metrics.bundle.size.raw > 50000) score -= 10;\n\n    // Deduct points for slow initialization\n    if (metrics.runtime.initTime > 1000) score -= 10;\n\n    return Math.max(0, score);\n  }\n\n  private generateRecommendations(metrics: PerformanceMetrics): string[] {\n    const recommendations: string[] = [];\n\n    if (metrics.vitals.lcp > 2500) {\n      recommendations.push('Optimize images and reduce server response time for better LCP');\n    }\n\n    if (metrics.vitals.fid > 100) {\n      recommendations.push('Reduce JavaScript execution time and break up long tasks');\n    }\n\n    if (metrics.vitals.cls > 0.1) {\n      recommendations.push('Ensure proper dimensions for images and avoid inserting content above existing content');\n    }\n\n    if (metrics.bundle.size.raw > 50000) {\n      recommendations.push('Consider code splitting and tree shaking to reduce bundle size');\n    }\n\n    if (metrics.runtime.initTime > 1000) {\n      recommendations.push('Optimize application initialization and load critical resources first');\n    }\n\n    if (metrics.runtime.memoryUsage > 50) {\n      recommendations.push('Monitor for memory leaks and optimize memory usage');\n    }\n\n    return recommendations;\n  }\n}\n\n// ============================================================================\n// Types and Interfaces\n// ============================================================================\n\nexport interface PerformanceMonitorConfig {\n  enabled?: boolean;\n  collectVitals?: boolean;\n  collectRuntime?: boolean;\n  collectBundle?: boolean;\n  reportingEndpoint?: string | null;\n  reportInterval?: number;\n}\n\nexport interface PerformanceReport {\n  timestamp: number;\n  url: string;\n  userAgent: string;\n  metrics: PerformanceMetrics;\n  score: number;\n  recommendations: string[];\n}\n\n// ============================================================================\n// Default Instance\n// ============================================================================\n\nexport const performanceMonitor = new PerformanceMonitor({\n  enabled: process.env.NODE_ENV === 'production',\n  collectVitals: true,\n  collectRuntime: true,\n  collectBundle: true,\n  reportingEndpoint: null, // Configure as needed\n  reportInterval: 30000\n});\n\n// ============================================================================\n// Convenience Functions\n// ============================================================================\n\nexport const initPerformanceMonitoring = (): void => {\n  performanceMonitor.init();\n};\n\nexport const getPerformanceMetrics = (): PerformanceMetrics => {\n  return performanceMonitor.getMetrics();\n};\n\nexport const recordPerformanceMetric = (name: string, value: number): void => {\n  performanceMonitor.recordMetric(name, value);\n};\n\nexport const generatePerformanceReport = (): PerformanceReport => {\n  return performanceMonitor.generateReport();\n};", "/**\n * Advanced State Management System\n *\n * Provides reactive state management with:\n * - Reactive patterns with observable state\n * - State persistence and recovery\n * - Debugging tools and monitoring\n * - TypeScript type safety\n * - Performance optimization\n */\n\nimport { CleanupManager } from './cleanup-manager';\nimport { performanceMonitor } from './performance-monitor';\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport type StateValue = string | number | boolean | object | null | undefined;\nexport type StateListener<T = StateValue> = (value: T, previousValue: T | undefined) => void;\nexport type StateMiddleware = (next: () => void, action: StateAction) => void;\nexport type StateSelector<T, R> = (state: T) => R;\n\nexport interface StateAction {\n  type: string;\n  payload?: StateValue;\n  meta?: Record<string, any>;\n  timestamp: number;\n}\n\nexport interface StateConfig {\n  persistence?: {\n    enabled: boolean;\n    key?: string;\n    storage?: 'localStorage' | 'sessionStorage' | 'memory';\n    serialize?: (state: any) => string;\n    deserialize?: (data: string) => any;\n    excludeKeys?: string[];\n  };\n  debug?: {\n    enabled: boolean;\n    logActions?: boolean;\n    logStateChanges?: boolean;\n    maxHistorySize?: number;\n  };\n  performance?: {\n    trackMetrics?: boolean;\n    batchSize?: number;\n    batchTimeout?: number;\n  };\n}\n\nexport interface ReactiveState<T = StateValue> {\n  value: T;\n  subscribe(listener: StateListener<T>): () => void;\n  select<R>(selector: StateSelector<T, R>): ReactiveState<R>;\n  get(): T;\n  set(value: T): void;\n  update(updater: (current: T) => T): void;\n}\n\nexport interface StateStoreConfig<T> {\n  initialState: T;\n  reducers?: Record<string, (state: T, action: StateAction) => T>;\n  middleware?: StateMiddleware[];\n  config?: StateConfig;\n}\n\nexport interface StateDebugInfo {\n  action: StateAction;\n  previousState: any;\n  nextState: any;\n  timestamp: number;\n  duration: number;\n  stackTrace?: string;\n}\n\nexport interface StateMetrics {\n  totalActions: number;\n  totalSubscribers: number;\n  averageActionTime: number;\n  memoryUsage: number;\n  lastUpdated: number;\n}\n\n// ============================================================================\n// Reactive State Implementation\n// ============================================================================\n\nclass ReactiveStateImpl<T> implements ReactiveState<T> {\n  private _value: T;\n  private listeners: Set<StateListener<T>> = new Set();\n  private cleanupManager: CleanupManager;\n  private key: string;\n\n  constructor(initialValue: T, key: string, cleanupManager: CleanupManager) {\n    this._value = initialValue;\n    this.key = key;\n    this.cleanupManager = cleanupManager;\n  }\n\n  get value(): T {\n    return this._value;\n  }\n\n  subscribe(listener: StateListener<T>): () => void {\n    this.listeners.add(listener);\n\n    // Cleanup subscription\n    const cleanup = () => {\n      this.listeners.delete(listener);\n    };\n\n    this.cleanupManager.register(cleanup, {\n      id: `state-subscription-${this.key}`,\n      description: `State subscription cleanup for ${this.key}`,\n      priority: 5\n    });\n\n    return cleanup;\n  }\n\n  select<R>(selector: StateSelector<T, R>): ReactiveState<R> {\n    const selectedValue = selector(this._value);\n    const selectedState = new ReactiveStateImpl(selectedValue, `${this.key}-selected`, this.cleanupManager);\n\n    // Subscribe to parent state and update selected state\n    this.subscribe((newValue) => {\n      const newSelectedValue = selector(newValue);\n      if (JSON.stringify(newSelectedValue) !== JSON.stringify(selectedState._value)) {\n        selectedState._value = newSelectedValue;\n        selectedState.notify();\n      }\n    });\n\n    return selectedState;\n  }\n\n  get(): T {\n    return this._value;\n  }\n\n  set(value: T): void {\n    const previousValue = this._value;\n    if (JSON.stringify(previousValue) !== JSON.stringify(value)) {\n      this._value = value;\n      this.notify();\n    }\n  }\n\n  update(updater: (current: T) => T): void {\n    const newValue = updater(this._value);\n    this.set(newValue);\n  }\n\n  private notify(): void {\n    for (const listener of this.listeners) {\n      try {\n        listener(this._value, this._value);\n      } catch (error) {\n        console.error(`Error in state listener for ${this.key}:`, error);\n      }\n    }\n  }\n\n  destroy(): void {\n    this.listeners.clear();\n  }\n}\n\n// ============================================================================\n// State Store Implementation\n// ============================================================================\n\nexport class StateStore<T = Record<string, any>> {\n  private state: ReactiveState<T>;\n  private reducers: Record<string, (state: T, action: StateAction) => T>;\n  private middleware: StateMiddleware[];\n  private config: StateConfig;\n  private cleanupManager: CleanupManager;\n  private debugHistory: StateDebugInfo[] = [];\n  private metrics: StateMetrics;\n\n  constructor(config: StateStoreConfig<T>) {\n    this.cleanupManager = CleanupManager.getInstance({\n      autoCleanupOnUnload: true,\n      logCleanupActivity: process.env.NODE_ENV === 'development'\n    });\n\n    this.state = new ReactiveStateImpl(config.initialState, 'root', this.cleanupManager);\n    this.reducers = config.reducers || {};\n    this.middleware = config.middleware || [];\n    this.config = this.mergeConfig(config.config);\n\n    this.metrics = {\n      totalActions: 0,\n      totalSubscribers: 0,\n      averageActionTime: 0,\n      memoryUsage: 0,\n      lastUpdated: Date.now()\n    };\n\n    this.initializePersistence();\n    this.setupDebugging();\n  }\n\n  // State Access Methods\n  get<K extends keyof T>(key?: K): K extends undefined ? T : T[K] {\n    if (key === undefined) {\n      return this.state.get() as any;\n    }\n    return this.state.get()[key] as any;\n  }\n\n  select<R>(selector: StateSelector<T, R>): ReactiveState<R> {\n    return this.state.select(selector);\n  }\n\n  subscribe(listener: StateListener<T>): () => void {\n    this.metrics.totalSubscribers++;\n    const cleanup = this.state.subscribe(listener);\n\n    return () => {\n      this.metrics.totalSubscribers--;\n      cleanup();\n    };\n  }\n\n  // State Mutation Methods\n  dispatch(action: StateAction | string, payload?: StateValue, meta?: Record<string, any>): void {\n    const startTime = performance.now();\n\n    const fullAction: StateAction = typeof action === 'string'\n      ? { type: action, payload, meta, timestamp: Date.now() }\n      : action;\n\n    if (this.config.debug?.enabled) {\n      this.logAction(fullAction);\n    }\n\n    const previousState = this.state.get();\n    let nextState = previousState;\n\n    try {\n      // Apply middleware\n      let index = 0;\n      const runMiddleware = () => {\n        if (index < this.middleware.length) {\n          const middleware = this.middleware[index];\n          index++;\n          middleware(() => runMiddleware(), fullAction);\n        } else {\n          // Apply reducer\n          if (this.reducers[fullAction.type]) {\n            nextState = this.reducers[fullAction.type](previousState, fullAction);\n          } else {\n            // Default reducer for simple updates\n            if (fullAction.payload !== undefined) {\n              if (meta?.key) {\n                nextState = { ...previousState, [meta.key]: fullAction.payload };\n              } else {\n                nextState = typeof fullAction.payload === 'object'\n                  ? { ...previousState, ...fullAction.payload }\n                  : fullAction.payload as T;\n              }\n            }\n          }\n\n          // Update state\n          this.state.set(nextState);\n          this.persistState(nextState);\n\n          // Update metrics\n          const duration = performance.now() - startTime;\n          this.updateMetrics(duration);\n\n          if (this.config.debug?.enabled) {\n            this.recordDebugInfo(fullAction, previousState, nextState, duration);\n          }\n        }\n      };\n\n      runMiddleware();\n\n    } catch (error) {\n      console.error(`Error dispatching action ${fullAction.type}:`, error);\n\n      if (this.config.debug?.enabled) {\n        this.recordDebugInfo(fullAction, previousState, previousState, performance.now() - startTime, error as Error);\n      }\n    }\n  }\n\n  set<K extends keyof T>(key: K, value: T[K]): void {\n    this.dispatch('SET_STATE', value, { key: key as string });\n  }\n\n  update<K extends keyof T>(key: K, updater: (current: T[K]) => T[K]): void {\n    const currentValue = this.get(key);\n    const newValue = updater(currentValue);\n    this.set(key, newValue);\n  }\n\n  reset(newState?: Partial<T>): void {\n    const resetAction: StateAction = {\n      type: 'RESET',\n      payload: newState,\n      timestamp: Date.now()\n    };\n    this.dispatch(resetAction);\n  }\n\n  // Persistence Methods\n  private initializePersistence(): void {\n    if (this.config.persistence?.enabled) {\n      const persistedState = this.loadPersistedState();\n      if (persistedState) {\n        this.state.set(persistedState);\n      }\n    }\n  }\n\n  private persistState(state: T): void {\n    if (!this.config.persistence?.enabled) return;\n\n    try {\n      const { key = 'app-state', storage = 'localStorage', serialize, excludeKeys = [] } = this.config.persistence;\n\n      let stateToPersist = state;\n      if (excludeKeys.length > 0) {\n        stateToPersist = { ...state };\n        excludeKeys.forEach(excludeKey => {\n          delete (stateToPersist as any)[excludeKey];\n        });\n      }\n\n      const serialized = serialize ? serialize(stateToPersist) : JSON.stringify(stateToPersist);\n\n      if (storage === 'localStorage') {\n        localStorage.setItem(key, serialized);\n      } else if (storage === 'sessionStorage') {\n        sessionStorage.setItem(key, serialized);\n      }\n    } catch (error) {\n      console.error('Failed to persist state:', error);\n    }\n  }\n\n  private loadPersistedState(): T | null {\n    if (!this.config.persistence?.enabled) return null;\n\n    try {\n      const { key = 'app-state', storage = 'localStorage', deserialize } = this.config.persistence;\n\n      let serialized: string | null = null;\n      if (storage === 'localStorage') {\n        serialized = localStorage.getItem(key);\n      } else if (storage === 'sessionStorage') {\n        serialized = sessionStorage.getItem(key);\n      }\n\n      if (serialized) {\n        return deserialize ? deserialize(serialized) : JSON.parse(serialized);\n      }\n    } catch (error) {\n      console.error('Failed to load persisted state:', error);\n    }\n\n    return null;\n  }\n\n  // Debugging Methods\n  private setupDebugging(): void {\n    if (this.config.debug?.enabled) {\n      this.setupConsoleDebugging();\n      this.setupPerformanceTracking();\n    }\n  }\n\n  private setupConsoleDebugging(): void {\n    if (process.env.NODE_ENV === 'development') {\n      (window as any).__STATE_STORE__ = this;\n\n      console.group('\uD83D\uDDC4\uFE0F State Manager Debug Mode');\n      console.log('State Store initialized');\n      console.log('Access via window.__STATE_STORE__');\n      console.log('Available methods: getState(), getDebugInfo(), getMetrics()');\n      console.groupEnd();\n    }\n  }\n\n  private setupPerformanceTracking(): void {\n    if (this.config.performance?.trackMetrics) {\n      performanceMonitor.recordMetric('state-store-init', Date.now());\n    }\n  }\n\n  private logAction(action: StateAction): void {\n    if (this.config.debug?.logActions) {\n      console.group(`\uD83C\uDFAC Action: ${action.type}`);\n      console.log('Payload:', action.payload);\n      console.log('Meta:', action.meta);\n      console.log('Timestamp:', new Date(action.timestamp));\n      console.groupEnd();\n    }\n  }\n\n  private recordDebugInfo(action: StateAction, previousState: any, nextState: any, duration: number, error?: Error): void {\n    const debugInfo: StateDebugInfo = {\n      action,\n      previousState,\n      nextState,\n      timestamp: Date.now(),\n      duration,\n      stackTrace: error?.stack\n    };\n\n    this.debugHistory.push(debugInfo);\n\n    const maxHistorySize = this.config.debug?.maxHistorySize || 50;\n    if (this.debugHistory.length > maxHistorySize) {\n      this.debugHistory = this.debugHistory.slice(-maxHistorySize);\n    }\n\n    if (this.config.debug?.logStateChanges) {\n      console.group(`\uD83D\uDD04 State Change: ${action.type}`);\n      console.log('Duration:', `${duration.toFixed(2)}ms`);\n      console.log('Previous:', previousState);\n      console.log('Next:', nextState);\n      if (error) {\n        console.error('Error:', error);\n      }\n      console.groupEnd();\n    }\n  }\n\n  private updateMetrics(duration: number): void {\n    this.metrics.totalActions++;\n    this.metrics.lastUpdated = Date.now();\n\n    // Update average action time\n    this.metrics.averageActionTime =\n      (this.metrics.averageActionTime * (this.metrics.totalActions - 1) + duration) / this.metrics.totalActions;\n\n    // Estimate memory usage\n    this.metrics.memoryUsage = JSON.stringify(this.state.get()).length;\n  }\n\n  // Utility Methods\n  private mergeConfig(userConfig?: StateConfig): StateConfig {\n    const defaultConfig: StateConfig = {\n      persistence: {\n        enabled: false,\n        key: 'app-state',\n        storage: 'localStorage'\n      },\n      debug: {\n        enabled: process.env.NODE_ENV === 'development',\n        logActions: true,\n        logStateChanges: false,\n        maxHistorySize: 50\n      },\n      performance: {\n        trackMetrics: true,\n        batchSize: 10,\n        batchTimeout: 16\n      }\n    };\n\n    return {\n      persistence: { ...defaultConfig.persistence, ...userConfig?.persistence },\n      debug: { ...defaultConfig.debug, ...userConfig?.debug },\n      performance: { ...defaultConfig.performance, ...userConfig?.performance }\n    };\n  }\n\n  // Public API Methods\n  getState(): T {\n    return this.state.get();\n  }\n\n  getDebugInfo(): StateDebugInfo[] {\n    return [...this.debugHistory];\n  }\n\n  getMetrics(): StateMetrics {\n    return { ...this.metrics };\n  }\n\n  clearDebugHistory(): void {\n    this.debugHistory = [];\n  }\n\n  clearPersistedState(): void {\n    if (this.config.persistence?.enabled) {\n      const { key = 'app-state', storage = 'localStorage' } = this.config.persistence;\n\n      if (storage === 'localStorage') {\n        localStorage.removeItem(key);\n      } else if (storage === 'sessionStorage') {\n        sessionStorage.removeItem(key);\n      }\n    }\n  }\n\n  destroy(): void {\n    this.state.destroy();\n    this.debugHistory = [];\n    this.cleanupManager.cleanupAll();\n  }\n}\n\n// ============================================================================\n// State Manager Factory\n// ============================================================================\n\nclass StateManager {\n  private stores: Map<string, StateStore> = new Map();\n  private cleanupManager: CleanupManager;\n\n  constructor() {\n    this.cleanupManager = CleanupManager.getInstance({\n      autoCleanupOnUnload: true,\n      logCleanupActivity: process.env.NODE_ENV === 'development'\n    });\n  }\n\n  createStore<T>(\n    name: string,\n    config: StateStoreConfig<T>\n  ): StateStore<T> {\n    if (this.stores.has(name)) {\n      throw new Error(`State store '${name}' already exists`);\n    }\n\n    const store = new StateStore(config);\n    this.stores.set(name, store);\n\n    // Cleanup store on page unload\n    this.cleanupManager.register(() => {\n      store.destroy();\n      this.stores.delete(name);\n    }, {\n      id: `state-store-${name}`,\n      description: `State store cleanup for ${name}`,\n      priority: 3\n    });\n\n    return store;\n  }\n\n  getStore<T>(name: string): StateStore<T> | undefined {\n    return this.stores.get(name) as StateStore<T>;\n  }\n\n  removeStore(name: string): boolean {\n    const store = this.stores.get(name);\n    if (store) {\n      store.destroy();\n      this.stores.delete(name);\n      return true;\n    }\n    return false;\n  }\n\n  getAllStores(): Map<string, StateStore> {\n    return new Map(this.stores);\n  }\n\n  getStoreNames(): string[] {\n    return Array.from(this.stores.keys());\n  }\n\n  // Utility method to create common store configurations\n  static createStoreConfig<T>(\n    initialState: T,\n    options?: Partial<StateStoreConfig<T>>\n  ): StateStoreConfig<T> {\n    return {\n      initialState,\n      ...options\n    };\n  }\n\n  destroy(): void {\n    for (const store of this.stores.values()) {\n      store.destroy();\n    }\n    this.stores.clear();\n    this.cleanupManager.cleanupAll();\n  }\n}\n\n// ============================================================================\n// Exports\n// ============================================================================\n\nexport const stateManager = new StateManager();\n\n// Convenience exports\nexport const createStore = <T>(name: string, config: StateStoreConfig<T>) =>\n  stateManager.createStore(name, config);\n\nexport const getStore = <T>(name: string): StateStore<T> | undefined =>\n  stateManager.getStore<T>(name);\n\n// Prebuilt middleware\nexport const loggerMiddleware: StateMiddleware = (next, action) => {\n  console.log(`\uD83D\uDD04 Dispatching: ${action.type}`, action.payload);\n  next();\n};\n\nexport const performanceMiddleware: StateMiddleware = (next, action) => {\n  const start = performance.now();\n  next();\n  const duration = performance.now() - start;\n\n  if (duration > 10) { // Log slow actions\n    console.warn(`\u26A0\uFE0F Slow action detected: ${action.type} took ${duration.toFixed(2)}ms`);\n  }\n};\n\nexport const persistenceMiddleware: StateMiddleware = (next, action) => {\n  // Prevent certain actions from being persisted\n  if (action.type.startsWith('TEMP_')) {\n    const originalMeta = action.meta || {};\n    action.meta = { ...originalMeta, persist: false };\n  }\n  next();\n};\n\nexport default stateManager;", "/**\n * State Persistence and Recovery System\n *\n * Provides advanced state persistence with:\n * - Multiple storage backends (localStorage, sessionStorage, IndexedDB)\n * - Compression and encryption support\n * - Migration system for schema changes\n * - Backup and restore functionality\n * - Automatic cleanup and quota management\n */\n\nimport { StateValue, StateConfig } from './state-manager';\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport type StorageBackend = 'localStorage' | 'sessionStorage' | 'indexedDB' | 'memory';\n\nexport interface PersistenceConfig {\n  backend: StorageBackend;\n  key: string;\n  version: number;\n  compression?: boolean;\n  encryption?: {\n    enabled: boolean;\n    key?: string;\n  };\n  migration?: {\n    currentVersion: number;\n    migrate: (data: any, fromVersion: number, toVersion: number) => any;\n  };\n  backup?: {\n    enabled: boolean;\n    interval?: number; // minutes\n    maxBackups?: number;\n  };\n  cleanup?: {\n    enabled: boolean;\n    maxAge?: number; // days\n    maxQuota?: number; // percentage\n  };\n}\n\nexport interface StorageAdapter {\n  get(key: string): Promise<any>;\n  set(key: string, value: any): Promise<void>;\n  remove(key: string): Promise<void>;\n  clear(): Promise<void>;\n  getQuota(): Promise<{ used: number; available: number }>;\n  listKeys(): Promise<string[]>;\n}\n\nexport interface BackupInfo {\n  id: string;\n  timestamp: number;\n  version: number;\n  size: number;\n  compressed: boolean;\n  encrypted: boolean;\n}\n\nexport interface MigrationResult {\n  success: boolean;\n  fromVersion: number;\n  toVersion: number;\n  dataMigrated: boolean;\n  errors?: string[];\n}\n\n// ============================================================================\n// Compression Utilities\n// ============================================================================\n\nclass StateCompressor {\n  static async compress(data: string): Promise<string> {\n    if ('CompressionStream' in window) {\n      const stream = new CompressionStream('gzip');\n      const writer = stream.writable.getWriter();\n      const reader = stream.readable.getReader();\n\n      writer.write(new TextEncoder().encode(data));\n      writer.close();\n\n      const chunks: Uint8Array[] = [];\n      let done = false;\n\n      while (!done) {\n        const { value, done: readerDone } = await reader.read();\n        done = readerDone;\n        if (value) chunks.push(value);\n      }\n\n      const compressed = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\n      let offset = 0;\n      for (const chunk of chunks) {\n        compressed.set(chunk, offset);\n        offset += chunk.length;\n      }\n\n      // Convert to base64 for storage\n      return btoa(String.fromCharCode(...compressed));\n    }\n\n    // Fallback: simple compression using repeated patterns\n    return this.simpleCompress(data);\n  }\n\n  static async decompress(compressedData: string): Promise<string> {\n    if ('DecompressionStream' in window) {\n      try {\n        const compressed = Uint8Array.from(atob(compressedData), c => c.charCodeAt(0));\n        const stream = new DecompressionStream('gzip');\n        const writer = stream.writable.getWriter();\n        const reader = stream.readable.getReader();\n\n        writer.write(compressed);\n        writer.close();\n\n        const chunks: Uint8Array[] = [];\n        let done = false;\n\n        while (!done) {\n          const { value, done: readerDone } = await reader.read();\n          done = readerDone;\n          if (value) chunks.push(value);\n        }\n\n        const decompressed = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\n        let offset = 0;\n        for (const chunk of chunks) {\n          decompressed.set(chunk, offset);\n          offset += chunk.length;\n        }\n\n        return new TextDecoder().decode(decompressed);\n      } catch (error) {\n        console.warn('Failed to decompress with gzip, trying fallback:', error);\n      }\n    }\n\n    // Fallback\n    return this.simpleDecompress(compressedData);\n  }\n\n  private static simpleCompress(data: string): string {\n    // Simple compression using dictionary replacement\n    const dict: Record<string, string> = {\n      'true': '1',\n      'false': '0',\n      'null': 'n',\n      'undefined': 'u',\n      '\"': \"'\",\n      '{': '{',\n      '}': '}',\n      '[': '[',\n      ']': ']',\n      ',': ',',\n      ':': ':'\n    };\n\n    let compressed = data;\n    for (const [key, value] of Object.entries(dict)) {\n      compressed = compressed.split(key).join(value);\n    }\n\n    return compressed;\n  }\n\n  private static simpleDecompress(compressedData: string): string {\n    const dict: Record<string, string> = {\n      '1': 'true',\n      '0': 'false',\n      'n': 'null',\n      'u': 'undefined'\n    };\n\n    let decompressed = compressedData;\n    for (const [key, value] of Object.entries(dict)) {\n      decompressed = decompressed.split(key).join(value);\n    }\n\n    return decompressed;\n  }\n}\n\n// ============================================================================\n// Encryption Utilities\n// ============================================================================\n\nclass StateEncryptor {\n  private static async generateKey(password: string): Promise<CryptoKey> {\n    const encoder = new TextEncoder();\n    const keyMaterial = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(password),\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits', 'deriveKey']\n    );\n\n    return crypto.subtle.deriveKey(\n      {\n        name: 'PBKDF2',\n        salt: encoder.encode('state-manager-salt'),\n        iterations: 100000,\n        hash: 'SHA-256'\n      },\n      keyMaterial,\n      { name: 'AES-GCM', length: 256 },\n      false,\n      ['encrypt', 'decrypt']\n    );\n  }\n\n  static async encrypt(data: string, password?: string): Promise<string> {\n    if (!password) return data; // No encryption if no password provided\n\n    try {\n      const key = await this.generateKey(password);\n      const encoder = new TextEncoder();\n      const iv = crypto.getRandomValues(new Uint8Array(12));\n\n      const encrypted = await crypto.subtle.encrypt(\n        { name: 'AES-GCM', iv },\n        key,\n        encoder.encode(data)\n      );\n\n      // Combine IV and encrypted data\n      const combined = new Uint8Array(iv.length + encrypted.byteLength);\n      combined.set(iv);\n      combined.set(new Uint8Array(encrypted), iv.length);\n\n      return btoa(String.fromCharCode(...combined));\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      return data; // Fallback to unencrypted\n    }\n  }\n\n  static async decrypt(encryptedData: string, password?: string): Promise<string> {\n    if (!password) return encryptedData;\n\n    try {\n      const key = await this.generateKey(password);\n      const combined = Uint8Array.from(atob(encryptedData), c => c.charCodeAt(0));\n\n      const iv = combined.slice(0, 12);\n      const encrypted = combined.slice(12);\n\n      const decrypted = await crypto.subtle.decrypt(\n        { name: 'AES-GCM', iv },\n        key,\n        encrypted\n      );\n\n      return new TextDecoder().decode(decrypted);\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      return encryptedData; // Fallback to encrypted data\n    }\n  }\n}\n\n// ============================================================================\n// Storage Adapters\n// ============================================================================\n\nclass LocalStorageAdapter implements StorageAdapter {\n  async get(key: string): Promise<any> {\n    const value = localStorage.getItem(key);\n    return value ? JSON.parse(value) : null;\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  async remove(key: string): Promise<void> {\n    localStorage.removeItem(key);\n  }\n\n  async clear(): Promise<void> {\n    localStorage.clear();\n  }\n\n  async getQuota(): Promise<{ used: number; available: number }> {\n    let used = 0;\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key) {\n        used += localStorage.getItem(key)?.length || 0;\n      }\n    }\n\n    // localStorage typically has 5-10MB limit\n    const estimated = 5 * 1024 * 1024; // 5MB\n    return { used, available: estimated - used };\n  }\n\n  async listKeys(): Promise<string[]> {\n    const keys: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key) keys.push(key);\n    }\n    return keys;\n  }\n}\n\nclass SessionStorageAdapter implements StorageAdapter {\n  async get(key: string): Promise<any> {\n    const value = sessionStorage.getItem(key);\n    return value ? JSON.parse(value) : null;\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    sessionStorage.setItem(key, JSON.stringify(value));\n  }\n\n  async remove(key: string): Promise<void> {\n    sessionStorage.removeItem(key);\n  }\n\n  async clear(): Promise<void> {\n    sessionStorage.clear();\n  }\n\n  async getQuota(): Promise<{ used: number; available: number }> {\n    let used = 0;\n    for (let i = 0; i < sessionStorage.length; i++) {\n      const key = sessionStorage.key(i);\n      if (key) {\n        used += sessionStorage.getItem(key)?.length || 0;\n      }\n    }\n\n    const estimated = 5 * 1024 * 1024; // 5MB\n    return { used, available: estimated - used };\n  }\n\n  async listKeys(): Promise<string[]> {\n    const keys: string[] = [];\n    for (let i = 0; i < sessionStorage.length; i++) {\n      const key = sessionStorage.key(i);\n      if (key) keys.push(key);\n    }\n    return keys;\n  }\n}\n\nclass IndexedDBAdapter implements StorageAdapter {\n  private dbName: string;\n  private storeName: string;\n  private db: IDBDatabase | null = null;\n\n  constructor(dbName = 'StateDB', storeName = 'state-store') {\n    this.dbName = dbName;\n    this.storeName = storeName;\n  }\n\n  private async initDB(): Promise<IDBDatabase> {\n    if (this.db) return this.db;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, 1);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(this.db);\n      };\n\n      request.onupgradeneeded = () => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          db.createObjectStore(this.storeName);\n        }\n      };\n    });\n  }\n\n  async get(key: string): Promise<any> {\n    const db = await this.initDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.get(key);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result?.value || null);\n    });\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    const db = await this.initDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.put({ key, value });\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async remove(key: string): Promise<void> {\n    const db = await this.initDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.delete(key);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async clear(): Promise<void> {\n    const db = await this.initDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.clear();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async getQuota(): Promise<{ used: number; available: number }> {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return {\n        used: estimate.usage || 0,\n        available: (estimate.quota || 0) - (estimate.usage || 0)\n      };\n    }\n\n    // Fallback estimation\n    return { used: 0, available: 50 * 1024 * 1024 }; // 50MB fallback\n  }\n\n  async listKeys(): Promise<string[]> {\n    const db = await this.initDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.getAllKeys();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result as string[]);\n    });\n  }\n}\n\nclass MemoryAdapter implements StorageAdapter {\n  private store: Map<string, any> = new Map();\n\n  async get(key: string): Promise<any> {\n    return this.store.get(key) || null;\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    this.store.set(key, value);\n  }\n\n  async remove(key: string): Promise<void> {\n    this.store.delete(key);\n  }\n\n  async clear(): Promise<void> {\n    this.store.clear();\n  }\n\n  async getQuota(): Promise<{ used: number; available: number }> {\n    let used = 0;\n    for (const [key, value] of this.store) {\n      used += key.length + JSON.stringify(value).length;\n    }\n\n    return { used, available: Number.MAX_SAFE_INTEGER };\n  }\n\n  async listKeys(): Promise<string[]> {\n    return Array.from(this.store.keys());\n  }\n}\n\n// ============================================================================\n// Migration System\n// ============================================================================\n\nexport class StateMigration {\n  static async migrate(data: any, config: PersistenceConfig): Promise<MigrationResult> {\n    const { migration } = config;\n    if (!migration) {\n      return { success: true, fromVersion: config.version, toVersion: config.version, dataMigrated: false };\n    }\n\n    try {\n      const dataVersion = data._version || 1;\n\n      if (dataVersion === migration.currentVersion) {\n        return { success: true, fromVersion: dataVersion, toVersion: migration.currentVersion, dataMigrated: false };\n      }\n\n      if (dataVersion > migration.currentVersion) {\n        console.warn(`Data version (${dataVersion}) is newer than expected (${migration.currentVersion})`);\n        return { success: true, fromVersion: dataVersion, toVersion: dataVersion, dataMigrated: false };\n      }\n\n      const errors: string[] = [];\n      let migratedData = { ...data };\n\n      for (let version = dataVersion; version < migration.currentVersion; version++) {\n        try {\n          migratedData = migration.migrate(migratedData, version, version + 1);\n          migratedData._version = version + 1;\n        } catch (error) {\n          const errorMsg = `Migration from v${version} to v${version + 1} failed: ${error}`;\n          errors.push(errorMsg);\n          console.error(errorMsg);\n        }\n      }\n\n      return {\n        success: errors.length === 0,\n        fromVersion: dataVersion,\n        toVersion: migration.currentVersion,\n        dataMigrated: errors.length === 0,\n        errors: errors.length > 0 ? errors : undefined\n      };\n    } catch (error) {\n      return {\n        success: false,\n        fromVersion: data._version || 1,\n        toVersion: migration.currentVersion,\n        dataMigrated: false,\n        errors: [`Migration failed: ${error}`]\n      };\n    }\n  }\n}\n\n// ============================================================================\n// Backup System\n// ============================================================================\n\nexport class StateBackup {\n  private static BACKUP_KEY_PREFIX = 'state-backup-';\n\n  static async createBackup(\n    data: any,\n    config: PersistenceConfig,\n    backupId?: string\n  ): Promise<BackupInfo> {\n    const id = backupId || this.generateBackupId();\n    const timestamp = Date.now();\n\n    const backupData = {\n      id,\n      timestamp,\n      version: config.version,\n      data,\n      metadata: {\n        compressed: config.compression || false,\n        encrypted: config.encryption?.enabled || false,\n        size: JSON.stringify(data).length\n      }\n    };\n\n    const backupKey = this.BACKUP_KEY_PREFIX + id;\n    const adapter = this.getStorageAdapter(config.backend);\n\n    await adapter.set(backupKey, backupData);\n\n    const backupInfo: BackupInfo = {\n      id,\n      timestamp,\n      version: config.version,\n      size: backupData.metadata.size,\n      compressed: backupData.metadata.compressed,\n      encrypted: backupData.metadata.encrypted\n    };\n\n    // Cleanup old backups if needed\n    if (config.backup?.maxBackups) {\n      await this.cleanupOldBackups(config.backend, config.backup.maxBackups);\n    }\n\n    return backupInfo;\n  }\n\n  static async restoreBackup(backupId: string, backend: StorageBackend): Promise<any> {\n    const backupKey = this.BACKUP_KEY_PREFIX + backupId;\n    const adapter = this.getStorageAdapter(backend);\n\n    const backupData = await adapter.get(backupKey);\n    if (!backupData) {\n      throw new Error(`Backup '${backupId}' not found`);\n    }\n\n    return backupData.data;\n  }\n\n  static async listBackups(backend: StorageBackend): Promise<BackupInfo[]> {\n    const adapter = this.getStorageAdapter(backend);\n    const keys = await adapter.listKeys();\n    const backupKeys = keys.filter(key => key.startsWith(this.BACKUP_KEY_PREFIX));\n\n    const backups: BackupInfo[] = [];\n    for (const key of backupKeys) {\n      const backupData = await adapter.get(key);\n      if (backupData) {\n        backups.push({\n          id: backupData.id,\n          timestamp: backupData.timestamp,\n          version: backupData.version,\n          size: backupData.metadata.size,\n          compressed: backupData.metadata.compressed,\n          encrypted: backupData.metadata.encrypted\n        });\n      }\n    }\n\n    return backups.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  static async deleteBackup(backupId: string, backend: StorageBackend): Promise<void> {\n    const backupKey = this.BACKUP_KEY_PREFIX + backupId;\n    const adapter = this.getStorageAdapter(backend);\n    await adapter.remove(backupKey);\n  }\n\n  private static generateBackupId(): string {\n    return `backup-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private static async cleanupOldBackups(backend: StorageBackend, maxBackups: number): Promise<void> {\n    const backups = await this.listBackups(backend);\n    if (backups.length <= maxBackups) return;\n\n    const backupsToDelete = backups.slice(maxBackups);\n    const adapter = this.getStorageAdapter(backend);\n\n    for (const backup of backupsToDelete) {\n      await this.deleteBackup(backup.id, backend);\n    }\n  }\n\n  private static getStorageAdapter(backend: StorageBackend): StorageAdapter {\n    switch (backend) {\n      case 'localStorage':\n        return new LocalStorageAdapter();\n      case 'sessionStorage':\n        return new SessionStorageAdapter();\n      case 'indexedDB':\n        return new IndexedDBAdapter();\n      case 'memory':\n        return new MemoryAdapter();\n      default:\n        return new LocalStorageAdapter();\n    }\n  }\n}\n\n// ============================================================================\n// Main Persistence Manager\n// ============================================================================\n\nexport class StatePersistenceManager {\n  private adapter: StorageAdapter;\n  private config: PersistenceConfig;\n\n  constructor(config: PersistenceConfig) {\n    this.config = config;\n    this.adapter = this.getStorageAdapter(config.backend);\n  }\n\n  async save(data: StateValue): Promise<void> {\n    try {\n      let processedData = {\n        _version: this.config.version,\n        _timestamp: Date.now(),\n        data\n      };\n\n      // Apply migration if needed\n      const migrationResult = await StateMigration.migrate(processedData, this.config);\n      if (!migrationResult.success && migrationResult.errors) {\n        console.error('State migration failed:', migrationResult.errors);\n        throw new Error('State migration failed');\n      }\n\n      processedData = migrationResult.dataMigrated ? processedData : data;\n\n      // Serialize data\n      let serialized = JSON.stringify(processedData);\n\n      // Compress if enabled\n      if (this.config.compression) {\n        serialized = await StateCompressor.compress(serialized);\n      }\n\n      // Encrypt if enabled\n      if (this.config.encryption?.enabled) {\n        serialized = await StateEncryptor.encrypt(serialized, this.config.encryption.key);\n      }\n\n      // Store the data\n      await this.adapter.set(this.config.key, {\n        compressed: this.config.compression || false,\n        encrypted: this.config.encryption?.enabled || false,\n        data: serialized\n      });\n\n      // Create backup if enabled\n      if (this.config.backup?.enabled) {\n        await this.createPeriodicBackup(processedData);\n      }\n\n    } catch (error) {\n      console.error('Failed to save state:', error);\n      throw error;\n    }\n  }\n\n  async load(): Promise<StateValue | null> {\n    try {\n      const stored = await this.adapter.get(this.config.key);\n      if (!stored) return null;\n\n      let data = stored.data;\n\n      // Decrypt if needed\n      if (stored.encrypted && this.config.encryption?.enabled) {\n        data = await StateEncryptor.decrypt(data, this.config.encryption.key);\n      }\n\n      // Decompress if needed\n      if (stored.compressed && this.config.compression) {\n        data = await StateCompressor.decompress(data);\n      }\n\n      const parsedData = JSON.parse(data);\n\n      // Apply migration\n      const migrationResult = await StateMigration.migrate(parsedData, this.config);\n      if (!migrationResult.success && migrationResult.errors) {\n        console.error('State migration failed during load:', migrationResult.errors);\n      }\n\n      return migrationResult.dataMigrated ? parsedData.data : parsedData.data || parsedData;\n\n    } catch (error) {\n      console.error('Failed to load state:', error);\n      return null;\n    }\n  }\n\n  async remove(): Promise<void> {\n    await this.adapter.remove(this.config.key);\n  }\n\n  async clear(): Promise<void> {\n    await this.adapter.clear();\n  }\n\n  async getQuota(): Promise<{ used: number; available: number; percentage: number }> {\n    const quota = await this.adapter.getQuota();\n    const percentage = quota.available > 0 ? (quota.used / (quota.used + quota.available)) * 100 : 100;\n    return { ...quota, percentage };\n  }\n\n  async createBackup(backupId?: string): Promise<BackupInfo> {\n    const data = await this.load();\n    if (!data) {\n      throw new Error('No data available to backup');\n    }\n\n    return StateBackup.createBackup(data, this.config, backupId);\n  }\n\n  async restoreBackup(backupId: string): Promise<void> {\n    const data = await StateBackup.restoreBackup(backupId, this.config.backend);\n    await this.save(data);\n  }\n\n  async listBackups(): Promise<BackupInfo[]> {\n    return StateBackup.listBackups(this.config.backend);\n  }\n\n  async deleteBackup(backupId: string): Promise<void> {\n    await StateBackup.deleteBackup(backupId, this.config.backend);\n  }\n\n  private async createPeriodicBackup(data: StateValue): Promise<void> {\n    const lastBackupKey = `${this.config.key}-last-backup`;\n    const lastBackupTime = await this.adapter.get(lastBackupKey);\n    const now = Date.now();\n    const interval = (this.config.backup?.interval || 60) * 60 * 1000; // Convert minutes to ms\n\n    if (!lastBackupTime || (now - lastBackupTime) > interval) {\n      await StateBackup.createBackup(data, this.config);\n      await this.adapter.set(lastBackupKey, now);\n    }\n  }\n\n  private getStorageAdapter(backend: StorageBackend): StorageAdapter {\n    switch (backend) {\n      case 'localStorage':\n        return new LocalStorageAdapter();\n      case 'sessionStorage':\n        return new SessionStorageAdapter();\n      case 'indexedDB':\n        return new IndexedDBAdapter();\n      case 'memory':\n        return new MemoryAdapter();\n      default:\n        return new LocalStorageAdapter();\n    }\n  }\n}\n\nexport default StatePersistenceManager;", "/**\n * State Management Debugging and Monitoring Tools\n *\n * Provides comprehensive debugging capabilities:\n * - Visual state inspector\n * - Action timeline and history\n * - Performance monitoring\n * - State diff visualization\n * - Error tracking and reporting\n * - Export/import functionality\n */\n\nimport { StateStore, StateAction, StateDebugInfo, StateMetrics } from './state-manager';\nimport { StatePersistenceManager, BackupInfo } from './state-persistence';\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport interface DebugConfig {\n  enabled: boolean;\n  visualInspector?: boolean;\n  actionTimeline?: boolean;\n  performanceMonitoring?: boolean;\n  errorTracking?: boolean;\n  stateDiff?: boolean;\n  exportImport?: boolean;\n  maxHistorySize?: number;\n  logLevel?: 'none' | 'error' | 'warn' | 'info' | 'debug';\n}\n\nexport interface StateSnapshot {\n  timestamp: number;\n  state: any;\n  action?: StateAction;\n  metrics?: StateMetrics;\n  performance?: {\n    actionTime: number;\n    renderTime: number;\n    memoryUsage: number;\n  };\n}\n\nexport interface ActionTimeline {\n  actions: StateAction[];\n  snapshots: StateSnapshot[];\n  errors: Array<{\n    action: StateAction;\n    error: Error;\n    timestamp: number;\n    stackTrace: string;\n  }>;\n}\n\nexport interface StateDiff {\n  path: string[];\n  oldValue: any;\n  newValue: any;\n  type: 'added' | 'removed' | 'modified' | 'moved';\n}\n\nexport interface PerformanceReport {\n  totalActions: number;\n  averageActionTime: number;\n  slowestActions: Array<{\n    action: string;\n    duration: number;\n    timestamp: number;\n  }>;\n  memoryTrend: Array<{\n    timestamp: number;\n    usage: number;\n  }>;\n  errors: number;\n}\n\n// ============================================================================\n// Visual State Inspector\n// ============================================================================\n\nexport class StateInspector {\n  private container: HTMLElement | null = null;\n  private isVisible: boolean = false;\n  private store: StateStore;\n  private config: DebugConfig;\n\n  constructor(store: StateStore, config: DebugConfig) {\n    this.store = store;\n    this.config = config;\n    this.createInspector();\n  }\n\n  private createInspector(): void {\n    if (!this.config.visualInspector) return;\n\n    // Create inspector container\n    this.container = document.createElement('div');\n    this.container.id = 'state-inspector';\n    this.container.innerHTML = `\n      <div class=\"state-inspector-header\">\n        <h3>\uD83D\uDDC4\uFE0F State Inspector</h3>\n        <div class=\"inspector-controls\">\n          <button id=\"inspector-toggle\" title=\"Toggle Inspector\">\uD83D\uDC41\uFE0F</button>\n          <button id=\"inspector-minimize\" title=\"Minimize\">\u2796</button>\n          <button id=\"inspector-close\" title=\"Close\">\u2716\uFE0F</button>\n        </div>\n      </div>\n      <div class=\"state-inspector-content\">\n        <div class=\"inspector-tabs\">\n          <button class=\"tab active\" data-tab=\"state\">State</button>\n          <button class=\"tab\" data-tab=\"actions\">Actions</button>\n          <button class=\"tab\" data-tab=\"performance\">Performance</button>\n          <button class=\"tab\" data-tab=\"tools\">Tools</button>\n        </div>\n        <div class=\"inspector-panels\">\n          <div class=\"panel active\" id=\"state-panel\">\n            <div class=\"state-view\"></div>\n          </div>\n          <div class=\"panel\" id=\"actions-panel\">\n            <div class=\"actions-timeline\"></div>\n          </div>\n          <div class=\"panel\" id=\"performance-panel\">\n            <div class=\"performance-metrics\"></div>\n          </div>\n          <div class=\"panel\" id=\"tools-panel\">\n            <div class=\"debug-tools\"></div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Add styles\n    this.addStyles();\n\n    // Setup event listeners\n    this.setupEventListeners();\n\n    // Add to DOM\n    document.body.appendChild(this.container);\n\n    // Initially hidden\n    this.hide();\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      #state-inspector {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        width: 400px;\n        max-height: 600px;\n        background: #1e1e1e;\n        border: 1px solid #444;\n        border-radius: 8px;\n        font-family: 'Monaco', 'Menlo', monospace;\n        font-size: 12px;\n        color: #fff;\n        z-index: 10000;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n        transition: all 0.3s ease;\n      }\n\n      #state-inspector.minimized {\n        height: 40px;\n        overflow: hidden;\n      }\n\n      #state-inspector.hidden {\n        display: none;\n      }\n\n      .state-inspector-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 10px 15px;\n        background: #2d2d2d;\n        border-bottom: 1px solid #444;\n        cursor: move;\n      }\n\n      .state-inspector-header h3 {\n        margin: 0;\n        font-size: 14px;\n        color: #4fc3f7;\n      }\n\n      .inspector-controls {\n        display: flex;\n        gap: 5px;\n      }\n\n      .inspector-controls button {\n        background: none;\n        border: none;\n        color: #ccc;\n        cursor: pointer;\n        padding: 5px;\n        border-radius: 3px;\n        transition: background 0.2s;\n      }\n\n      .inspector-controls button:hover {\n        background: #444;\n      }\n\n      .state-inspector-content {\n        max-height: 560px;\n        overflow-y: auto;\n      }\n\n      .inspector-tabs {\n        display: flex;\n        background: #2d2d2d;\n        border-bottom: 1px solid #444;\n      }\n\n      .inspector-tabs .tab {\n        flex: 1;\n        padding: 10px;\n        background: none;\n        border: none;\n        color: #ccc;\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n\n      .inspector-tabs .tab:hover,\n      .inspector-tabs .tab.active {\n        background: #3d3d3d;\n        color: #4fc3f7;\n      }\n\n      .inspector-panels {\n        padding: 15px;\n      }\n\n      .panel {\n        display: none;\n      }\n\n      .panel.active {\n        display: block;\n      }\n\n      .state-view {\n        background: #1a1a1a;\n        padding: 10px;\n        border-radius: 4px;\n        overflow-x: auto;\n      }\n\n      .state-json {\n        color: #ccc;\n        white-space: pre-wrap;\n        font-family: 'Monaco', 'Menlo', monospace;\n        font-size: 11px;\n      }\n\n      .actions-timeline {\n        max-height: 400px;\n        overflow-y: auto;\n      }\n\n      .action-item {\n        background: #2a2a2a;\n        margin-bottom: 8px;\n        padding: 10px;\n        border-radius: 4px;\n        border-left: 3px solid #4fc3f7;\n      }\n\n      .action-item.error {\n        border-left-color: #f44336;\n      }\n\n      .action-type {\n        color: #4fc3f7;\n        font-weight: bold;\n        margin-bottom: 5px;\n      }\n\n      .action-payload {\n        color: #ccc;\n        font-size: 11px;\n        margin-bottom: 5px;\n      }\n\n      .action-timestamp {\n        color: #888;\n        font-size: 10px;\n      }\n\n      .performance-metrics {\n        display: grid;\n        gap: 15px;\n      }\n\n      .metric-card {\n        background: #2a2a2a;\n        padding: 15px;\n        border-radius: 4px;\n        border-left: 3px solid #4fc3f7;\n      }\n\n      .metric-label {\n        color: #888;\n        font-size: 10px;\n        text-transform: uppercase;\n        margin-bottom: 5px;\n      }\n\n      .metric-value {\n        color: #4fc3f7;\n        font-size: 18px;\n        font-weight: bold;\n      }\n\n      .debug-tools {\n        display: grid;\n        gap: 10px;\n      }\n\n      .tool-button {\n        background: #2a2a2a;\n        border: 1px solid #444;\n        color: #ccc;\n        padding: 10px;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: all 0.2s;\n        text-align: left;\n      }\n\n      .tool-button:hover {\n        background: #3a3a3a;\n        border-color: #4fc3f7;\n      }\n\n      .tool-button .tool-name {\n        color: #4fc3f7;\n        font-weight: bold;\n        margin-bottom: 5px;\n      }\n\n      .tool-button .tool-description {\n        color: #888;\n        font-size: 10px;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private setupEventListeners(): void {\n    if (!this.container) return;\n\n    // Tab switching\n    this.container.querySelectorAll('.tab').forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const tabName = (e.target as HTMLElement).dataset.tab;\n        this.switchTab(tabName);\n      });\n    });\n\n    // Control buttons\n    const toggleBtn = this.container.querySelector('#inspector-toggle');\n    const minimizeBtn = this.container.querySelector('#inspector-minimize');\n    const closeBtn = this.container.querySelector('#inspector-close');\n\n    toggleBtn?.addEventListener('click', () => this.toggle());\n    minimizeBtn?.addEventListener('click', () => this.toggleMinimize());\n    closeBtn?.addEventListener('click', () => this.hide());\n\n    // Make header draggable\n    const header = this.container.querySelector('.state-inspector-header');\n    this.makeDraggable(header as HTMLElement, this.container);\n\n    // Subscribe to state changes\n    this.store.subscribe(() => this.updateStateView());\n  }\n\n  private switchTab(tabName: string): void {\n    if (!this.container) return;\n\n    // Update tab buttons\n    this.container.querySelectorAll('.tab').forEach(tab => {\n      tab.classList.remove('active');\n      if ((tab as HTMLElement).dataset.tab === tabName) {\n        tab.classList.add('active');\n      }\n    });\n\n    // Update panels\n    this.container.querySelectorAll('.panel').forEach(panel => {\n      panel.classList.remove('active');\n    });\n\n    const activePanel = this.container.querySelector(`#${tabName}-panel`);\n    activePanel?.classList.add('active');\n\n    // Update panel content\n    switch (tabName) {\n      case 'state':\n        this.updateStateView();\n        break;\n      case 'actions':\n        this.updateActionsView();\n        break;\n      case 'performance':\n        this.updatePerformanceView();\n        break;\n      case 'tools':\n        this.updateToolsView();\n        break;\n    }\n  }\n\n  private updateStateView(): void {\n    if (!this.container) return;\n\n    const stateView = this.container.querySelector('.state-view') as HTMLElement;\n    const state = this.store.getState();\n\n    stateView.innerHTML = `\n      <div class=\"state-json\">${JSON.stringify(state, null, 2)}</div>\n    `;\n  }\n\n  private updateActionsView(): void {\n    if (!this.container) return;\n\n    const actionsTimeline = this.container.querySelector('.actions-timeline') as HTMLElement;\n    const debugInfo = this.store.getDebugInfo();\n\n    actionsTimeline.innerHTML = debugInfo.map(info => `\n      <div class=\"action-item ${info.stackTrace ? 'error' : ''}\">\n        <div class=\"action-type\">${info.action.type}</div>\n        <div class=\"action-payload\">${JSON.stringify(info.action.payload)}</div>\n        <div class=\"action-timestamp\">\n          ${new Date(info.timestamp).toLocaleTimeString()} (${info.duration.toFixed(2)}ms)\n        </div>\n      </div>\n    `).reverse().join('');\n  }\n\n  private updatePerformanceView(): void {\n    if (!this.container) return;\n\n    const performanceMetrics = this.container.querySelector('.performance-metrics') as HTMLElement;\n    const metrics = this.store.getMetrics();\n    const debugInfo = this.store.getDebugInfo();\n\n    // Calculate slowest actions\n    const slowestActions = debugInfo\n      .filter(info => info.duration > 5)\n      .sort((a, b) => b.duration - a.duration)\n      .slice(0, 5);\n\n    performanceMetrics.innerHTML = `\n      <div class=\"metric-card\">\n        <div class=\"metric-label\">Total Actions</div>\n        <div class=\"metric-value\">${metrics.totalActions}</div>\n      </div>\n      <div class=\"metric-card\">\n        <div class=\"metric-label\">Average Action Time</div>\n        <div class=\"metric-value\">${metrics.averageActionTime.toFixed(2)}ms</div>\n      </div>\n      <div class=\"metric-card\">\n        <div class=\"metric-label\">Memory Usage</div>\n        <div class=\"metric-value\">${(metrics.memoryUsage / 1024).toFixed(1)}KB</div>\n      </div>\n      <div class=\"metric-card\">\n        <div class=\"metric-label\">Active Subscribers</div>\n        <div class=\"metric-value\">${metrics.totalSubscribers}</div>\n      </div>\n      ${slowestActions.length > 0 ? `\n        <div class=\"metric-card\">\n          <div class=\"metric-label\">Slowest Actions</div>\n          ${slowestActions.map(action => `\n            <div style=\"margin-bottom: 5px; font-size: 11px;\">\n              ${action.action.type}: ${action.duration.toFixed(2)}ms\n            </div>\n          `).join('')}\n        </div>\n      ` : ''}\n    `;\n  }\n\n  private updateToolsView(): void {\n    if (!this.container) return;\n\n    const debugTools = this.container.querySelector('.debug-tools') as HTMLElement;\n\n    debugTools.innerHTML = `\n      <button class=\"tool-button\" id=\"export-state\">\n        <div class=\"tool-name\">\uD83D\uDCE4 Export State</div>\n        <div class=\"tool-description\">Export current state to JSON</div>\n      </button>\n      <button class=\"tool-button\" id=\"import-state\">\n        <div class=\"tool-name\">\uD83D\uDCE5 Import State</div>\n        <div class=\"tool-description\">Import state from JSON</div>\n      </button>\n      <button class=\"tool-button\" id=\"create-backup\">\n        <div class=\"tool-name\">\uD83D\uDCBE Create Backup</div>\n        <div class=\"tool-description\">Create state backup</div>\n      </button>\n      <button class=\"tool-button\" id=\"clear-debug\">\n        <div class=\"tool-name\">\uD83E\uDDF9 Clear Debug History</div>\n        <div class=\"tool-description\">Clear debugging history</div>\n      </button>\n      <button class=\"tool-button\" id=\"reset-state\">\n        <div class=\"tool-name\">\uD83D\uDD04 Reset State</div>\n        <div class=\"tool-description\">Reset to initial state</div>\n      </button>\n    `;\n\n    // Setup tool button listeners\n    this.setupToolListeners();\n  }\n\n  private setupToolListeners(): void {\n    if (!this.container) return;\n\n    const exportBtn = this.container.querySelector('#export-state');\n    const importBtn = this.container.querySelector('#import-state');\n    const backupBtn = this.container.querySelector('#create-backup');\n    const clearBtn = this.container.querySelector('#clear-debug');\n    const resetBtn = this.container.querySelector('#reset-state');\n\n    exportBtn?.addEventListener('click', () => this.exportState());\n    importBtn?.addEventListener('click', () => this.importState());\n    backupBtn?.addEventListener('click', () => this.createBackup());\n    clearBtn?.addEventListener('click', () => this.clearDebugHistory());\n    resetBtn?.addEventListener('click', () => this.resetState());\n  }\n\n  private makeDraggable(dragHandle: HTMLElement, element: HTMLElement): void {\n    let isDragging = false;\n    let currentX: number;\n    let currentY: number;\n    let initialX: number;\n    let initialY: number;\n\n    dragHandle.addEventListener('mousedown', (e) => {\n      isDragging = true;\n      initialX = e.clientX - element.offsetLeft;\n      initialY = e.clientY - element.offsetTop;\n    });\n\n    document.addEventListener('mousemove', (e) => {\n      if (!isDragging) return;\n      e.preventDefault();\n      currentX = e.clientX - initialX;\n      currentY = e.clientY - initialY;\n      element.style.left = `${currentX}px`;\n      element.style.top = `${currentY}px`;\n    });\n\n    document.addEventListener('mouseup', () => {\n      isDragging = false;\n    });\n  }\n\n  private exportState(): void {\n    const state = this.store.getState();\n    const dataStr = JSON.stringify(state, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `state-export-${Date.now()}.json`;\n    link.click();\n\n    URL.revokeObjectURL(url);\n  }\n\n  private importState(): void {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const state = JSON.parse(e.target?.result as string);\n          this.store.reset(state);\n          alert('State imported successfully!');\n        } catch (error) {\n          alert('Failed to import state: Invalid JSON');\n        }\n      };\n      reader.readAsText(file);\n    };\n\n    input.click();\n  }\n\n  private async createBackup(): Promise<void> {\n    try {\n      // This would integrate with the persistence manager\n      const state = this.store.getState();\n      const backupData = {\n        timestamp: Date.now(),\n        state,\n        debugInfo: this.store.getDebugInfo(),\n        metrics: this.store.getMetrics()\n      };\n\n      const dataStr = JSON.stringify(backupData, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `state-backup-${Date.now()}.json`;\n      link.click();\n\n      URL.revokeObjectURL(url);\n      alert('Backup created successfully!');\n    } catch (error) {\n      alert('Failed to create backup');\n    }\n  }\n\n  private clearDebugHistory(): void {\n    this.store.clearDebugHistory();\n    this.updateActionsView();\n    alert('Debug history cleared!');\n  }\n\n  private resetState(): void {\n    if (confirm('Are you sure you want to reset the state? This cannot be undone.')) {\n      this.store.reset();\n      alert('State reset successfully!');\n    }\n  }\n\n  show(): void {\n    if (this.container) {\n      this.container.classList.remove('hidden');\n      this.isVisible = true;\n    }\n  }\n\n  hide(): void {\n    if (this.container) {\n      this.container.classList.add('hidden');\n      this.isVisible = false;\n    }\n  }\n\n  toggle(): void {\n    if (this.isVisible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  toggleMinimize(): void {\n    if (this.container) {\n      this.container.classList.toggle('minimized');\n    }\n  }\n\n  destroy(): void {\n    if (this.container) {\n      document.body.removeChild(this.container);\n      this.container = null;\n    }\n  }\n}\n\n// ============================================================================\n// Action Timeline\n// ============================================================================\n\nexport class ActionTimeline {\n  private snapshots: StateSnapshot[] = [];\n  private errors: Array<{\n    action: StateAction;\n    error: Error;\n    timestamp: number;\n    stackTrace: string;\n  }> = [];\n  private maxSnapshots: number;\n\n  constructor(maxSnapshots: number = 100) {\n    this.maxSnapshots = maxSnapshots;\n  }\n\n  recordSnapshot(\n    action: StateAction,\n    state: any,\n    metrics: StateMetrics,\n    performance: { actionTime: number; renderTime: number; memoryUsage: number }\n  ): void {\n    const snapshot: StateSnapshot = {\n      timestamp: Date.now(),\n      state: JSON.parse(JSON.stringify(state)), // Deep clone\n      action: { ...action },\n      metrics: { ...metrics },\n      performance: { ...performance }\n    };\n\n    this.snapshots.push(snapshot);\n\n    // Maintain max size\n    if (this.snapshots.length > this.maxSnapshots) {\n      this.snapshots = this.snapshots.slice(-this.maxSnapshots);\n    }\n  }\n\n  recordError(action: StateAction, error: Error): void {\n    this.errors.push({\n      action: { ...action },\n      error: { ...error },\n      timestamp: Date.now(),\n      stackTrace: error.stack || ''\n    });\n  }\n\n  getTimeline(): ActionTimeline {\n    return {\n      actions: this.snapshots.map(s => s.action!).filter(Boolean),\n      snapshots: [...this.snapshots],\n      errors: [...this.errors]\n    };\n  }\n\n  getSnapshotsInRange(startTime: number, endTime: number): StateSnapshot[] {\n    return this.snapshots.filter(s => s.timestamp >= startTime && s.timestamp <= endTime);\n  }\n\n  clear(): void {\n    this.snapshots = [];\n    this.errors = [];\n  }\n\n  export(): string {\n    return JSON.stringify(this.getTimeline(), null, 2);\n  }\n\n  import(data: string): void {\n    try {\n      const timeline = JSON.parse(data) as ActionTimeline;\n      this.snapshots = timeline.snapshots || [];\n      this.errors = timeline.errors || [];\n    } catch (error) {\n      throw new Error('Invalid timeline data format');\n    }\n  }\n}\n\n// ============================================================================\n// State Diff Calculator\n// ============================================================================\n\nexport class StateDiffCalculator {\n  static calculateDiff(oldState: any, newState: any, path: string[] = []): StateDiff[] {\n    const diffs: StateDiff[] = [];\n\n    // Handle null/undefined cases\n    if (oldState === newState) {\n      return diffs;\n    }\n\n    // Handle primitive values\n    if (typeof oldState !== 'object' || oldState === null ||\n        typeof newState !== 'object' || newState === null) {\n      diffs.push({\n        path,\n        oldValue: oldState,\n        newValue: newState,\n        type: oldState === undefined ? 'added' :\n              newState === undefined ? 'removed' : 'modified'\n      });\n      return diffs;\n    }\n\n    // Handle arrays\n    if (Array.isArray(oldState) && Array.isArray(newState)) {\n      const maxLength = Math.max(oldState.length, newState.length);\n\n      for (let i = 0; i < maxLength; i++) {\n        const oldItem = oldState[i];\n        const newItem = newState[i];\n\n        if (oldItem === undefined) {\n          diffs.push({\n            path: [...path, i.toString()],\n            oldValue: undefined,\n            newValue: newItem,\n            type: 'added'\n          });\n        } else if (newItem === undefined) {\n          diffs.push({\n            path: [...path, i.toString()],\n            oldValue: oldItem,\n            newValue: undefined,\n            type: 'removed'\n          });\n        } else {\n          diffs.push(...this.calculateDiff(oldItem, newItem, [...path, i.toString()]));\n        }\n      }\n      return diffs;\n    }\n\n    // Handle objects\n    const allKeys = new Set([...Object.keys(oldState), ...Object.keys(newState)]);\n\n    for (const key of allKeys) {\n      const oldValue = oldState[key];\n      const newValue = newState[key];\n\n      if (oldValue === undefined) {\n        diffs.push({\n          path: [...path, key],\n          oldValue: undefined,\n          newValue,\n          type: 'added'\n        });\n      } else if (newValue === undefined) {\n        diffs.push({\n          path: [...path, key],\n          oldValue,\n          newValue: undefined,\n          type: 'removed'\n        });\n      } else {\n        diffs.push(...this.calculateDiff(oldValue, newValue, [...path, key]));\n      }\n    }\n\n    return diffs;\n  }\n\n  static formatDiffs(diffs: StateDiff[]): string {\n    return diffs.map(diff => {\n      const path = diff.path.join('.');\n      const oldValue = JSON.stringify(diff.oldValue);\n      const newValue = JSON.stringify(diff.newValue);\n      const icon = diff.type === 'added' ? '\u2795' :\n                  diff.type === 'removed' ? '\u2796' :\n                  diff.type === 'modified' ? '\uD83D\uDD04' : '\u2194\uFE0F';\n\n      return `${icon} ${path}: ${oldValue} \u2192 ${newValue}`;\n    }).join('\\n');\n  }\n}\n\n// ============================================================================\n// Performance Monitor\n// ============================================================================\n\nexport class StatePerformanceMonitor {\n  private actionTimes: Array<{ action: string; duration: number; timestamp: number }> = [];\n  private memorySnapshots: Array<{ timestamp: number; usage: number }> = [];\n  private errorCount: number = 0;\n\n  recordAction(action: string, duration: number): void {\n    this.actionTimes.push({ action, duration, timestamp: Date.now() });\n\n    // Keep only last 1000 actions\n    if (this.actionTimes.length > 1000) {\n      this.actionTimes = this.actionTimes.slice(-1000);\n    }\n  }\n\n  recordMemoryUsage(): void {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      this.memorySnapshots.push({\n        timestamp: Date.now(),\n        usage: memory.usedJSHeapSize\n      });\n\n      // Keep only last 100 snapshots\n      if (this.memorySnapshots.length > 100) {\n        this.memorySnapshots = this.memorySnapshots.slice(-100);\n      }\n    }\n  }\n\n  recordError(): void {\n    this.errorCount++;\n  }\n\n  generateReport(): PerformanceReport {\n    const totalActions = this.actionTimes.length;\n    const averageActionTime = totalActions > 0\n      ? this.actionTimes.reduce((sum, a) => sum + a.duration, 0) / totalActions\n      : 0;\n\n    const slowestActions = [...this.actionTimes]\n      .sort((a, b) => b.duration - a.duration)\n      .slice(0, 10)\n      .map(({ action, duration, timestamp }) => ({ action, duration, timestamp }));\n\n    return {\n      totalActions,\n      averageActionTime,\n      slowestActions,\n      memoryTrend: this.memorySnapshots,\n      errors: this.errorCount\n    };\n  }\n\n  clear(): void {\n    this.actionTimes = [];\n    this.memorySnapshots = [];\n    this.errorCount = 0;\n  }\n}\n\n// ============================================================================\n// Debug Manager\n// ============================================================================\n\nexport class StateDebugManager {\n  private inspector: StateInspector;\n  private timeline: ActionTimeline;\n  private performanceMonitor: StatePerformanceMonitor;\n  private config: DebugConfig;\n\n  constructor(store: StateStore, config: DebugConfig) {\n    this.config = config;\n    this.inspector = new StateInspector(store, config);\n    this.timeline = new ActionTimeline(config.maxHistorySize || 100);\n    this.performanceMonitor = new StatePerformanceMonitor();\n\n    this.setupStoreMonitoring(store);\n    this.setupGlobalAccess();\n  }\n\n  private setupStoreMonitoring(store: StateStore): void {\n    if (!this.config.enabled) return;\n\n    // Monitor state changes\n    store.subscribe((state, previousState) => {\n      if (this.config.performanceMonitoring) {\n        this.performanceMonitor.recordMemoryUsage();\n      }\n\n      if (this.config.actionTimeline && previousState) {\n        const metrics = store.getMetrics();\n        const debugInfo = store.getDebugInfo();\n        const lastAction = debugInfo[debugInfo.length - 1];\n\n        if (lastAction) {\n          this.timeline.recordSnapshot(\n            lastAction.action,\n            state,\n            metrics,\n            {\n              actionTime: lastAction.duration,\n              renderTime: 0, // Could be measured with requestAnimationFrame\n              memoryUsage: metrics.memoryUsage\n            }\n          );\n\n          if (this.config.performanceMonitoring) {\n            this.performanceMonitor.recordAction(lastAction.action.type, lastAction.duration);\n          }\n        }\n      }\n    });\n\n    // Monitor errors (would need to be integrated with store error handling)\n    this.setupErrorMonitoring(store);\n  }\n\n  private setupErrorMonitoring(store: StateStore): void {\n    if (!this.config.errorTracking) return;\n\n    // Override store dispatch to catch errors\n    const originalDispatch = store.dispatch.bind(store);\n    store.dispatch = (...args: any[]) => {\n      try {\n        return originalDispatch(...args);\n      } catch (error) {\n        const action = args[0];\n        this.timeline.recordError(action, error as Error);\n        this.performanceMonitor.recordError();\n\n        if (this.config.logLevel !== 'none') {\n          console.error('State action error:', error);\n        }\n\n        throw error;\n      }\n    };\n  }\n\n  private setupGlobalAccess(): void {\n    if (process.env.NODE_ENV === 'development') {\n      (window as any).__STATE_DEBUG__ = {\n        inspector: this.inspector,\n        timeline: this.timeline,\n        performanceMonitor: this.performanceMonitor,\n        generateReport: () => this.performanceMonitor.generateReport(),\n        exportTimeline: () => this.timeline.export(),\n        clearHistory: () => this.clearAll()\n      };\n\n      console.group('\uD83D\uDDC4\uFE0F State Debug Tools Initialized');\n      console.log('Access via window.__STATE_DEBUG__');\n      console.log('Available methods:');\n      console.log('  - inspector: Visual state inspector');\n      console.log('  - timeline: Action timeline viewer');\n      console.log('  - performanceMonitor: Performance metrics');\n      console.log('  - generateReport(): Generate performance report');\n      console.log('  - exportTimeline(): Export action timeline');\n      console.log('  - clearHistory(): Clear all debug data');\n      console.groupEnd();\n    }\n  }\n\n  private clearAll(): void {\n    this.timeline.clear();\n    this.performanceMonitor.clear();\n  }\n\n  destroy(): void {\n    this.inspector.destroy();\n    this.clearAll();\n  }\n}\n\nexport default StateDebugManager;", "/**\n * Application State Management Integration\n *\n * Integrates the state management system with existing modules:\n * - Theme state management\n * - Navigation state management\n * - UI state management\n * - User preferences\n * - Application settings\n */\n\nimport { createStore, StateStore, StateConfig } from './state-manager';\nimport { StatePersistenceManager, PersistenceConfig } from './state-persistence';\nimport { StateDebugManager, DebugConfig } from './state-debug-tools';\nimport type { ThemeMode } from '../types';\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport interface AppState {\n  theme: {\n    mode: ThemeMode;\n    systemPreference: ThemeMode;\n    isTransitioning: boolean;\n  };\n  navigation: {\n    isMobileMenuOpen: boolean;\n    isMobile: boolean;\n    activeSection: string;\n    scrollPosition: number;\n  };\n  ui: {\n    isLoading: boolean;\n    notifications: Array<{\n      id: string;\n      type: 'info' | 'success' | 'warning' | 'error';\n      message: string;\n      timestamp: number;\n      autoHide?: number;\n    }>;\n    modals: Array<{\n      id: string;\n      isOpen: boolean;\n      title?: string;\n      content?: any;\n    }>;\n    sidebar: {\n      isOpen: boolean;\n      activeTab: string;\n    };\n  };\n  user: {\n    preferences: {\n      language: string;\n      timezone: string;\n      dateFormat: string;\n      animationsEnabled: boolean;\n      reducedMotion: boolean;\n    };\n    session: {\n      startTime: number;\n      pageViews: number;\n      timeOnPage: number;\n      lastActivity: number;\n    };\n  };\n  app: {\n    version: string;\n    buildNumber: string;\n    environment: 'development' | 'production' | 'test';\n    isFirstVisit: boolean;\n    hasSeenOnboarding: boolean;\n    lastVisit: number;\n  };\n}\n\nexport interface AppAction {\n  type: string;\n  payload?: any;\n  meta?: {\n    persist?: boolean;\n    analytics?: boolean;\n    undoable?: boolean;\n  };\n}\n\n// ============================================================================\n// Initial State\n// ============================================================================\n\nconst getInitialState = (): AppState => ({\n  theme: {\n    mode: 'system',\n    systemPreference: 'light',\n    isTransitioning: false\n  },\n  navigation: {\n    isMobileMenuOpen: false,\n    isMobile: false,\n    activeSection: '',\n    scrollPosition: 0\n  },\n  ui: {\n    isLoading: false,\n    notifications: [],\n    modals: [],\n    sidebar: {\n      isOpen: false,\n      activeTab: 'main'\n    }\n  },\n  user: {\n    preferences: {\n      language: 'en',\n      timezone: 'UTC',\n      dateFormat: 'YYYY-MM-DD',\n      animationsEnabled: true,\n      reducedMotion: false\n    },\n    session: {\n      startTime: Date.now(),\n      pageViews: 1,\n      timeOnPage: 0,\n      lastActivity: Date.now()\n    }\n  },\n  app: {\n    version: '1.0.0',\n    buildNumber: process.env.BUILD_NUMBER || 'dev',\n    environment: (process.env.NODE_ENV as any) || 'development',\n    isFirstVisit: !localStorage.getItem('app-visited'),\n    hasSeenOnboarding: false,\n    lastVisit: 0\n  }\n});\n\n// ============================================================================\n// Reducers\n// ============================================================================\n\nconst themeReducers = {\n  SET_THEME: (state: AppState['theme'], action: AppAction): AppState['theme'] => {\n    const newMode = action.payload as ThemeMode;\n    return {\n      ...state,\n      mode: newMode,\n      isTransitioning: true\n    };\n  },\n  SET_SYSTEM_THEME: (state: AppState['theme'], action: AppAction): AppState['theme'] => {\n    return {\n      ...state,\n      systemPreference: action.payload as ThemeMode\n    };\n  },\n  THEME_TRANSITION_END: (state: AppState['theme']): AppState['theme'] => {\n    return {\n      ...state,\n      isTransitioning: false\n    };\n  }\n};\n\nconst navigationReducers = {\n  TOGGLE_MOBILE_MENU: (state: AppState['navigation']): AppState['navigation'] => {\n    return {\n      ...state,\n      isMobileMenuOpen: !state.isMobileMenuOpen\n    };\n  },\n  SET_MOBILE_MENU_OPEN: (state: AppState['navigation'], action: AppAction): AppState['navigation'] => {\n    return {\n      ...state,\n      isMobileMenuOpen: action.payload as boolean\n    };\n  },\n  SET_MOBILE: (state: AppState['navigation'], action: AppAction): AppState['navigation'] => {\n    return {\n      ...state,\n      isMobile: action.payload as boolean\n    };\n  },\n  SET_ACTIVE_SECTION: (state: AppState['navigation'], action: AppAction): AppState['navigation'] => {\n    return {\n      ...state,\n      activeSection: action.payload as string\n    };\n  },\n  SET_SCROLL_POSITION: (state: AppState['navigation'], action: AppAction): AppState['navigation'] => {\n    return {\n      ...state,\n      scrollPosition: action.payload as number\n    };\n  }\n};\n\nconst uiReducers = {\n  SET_LOADING: (state: AppState['ui'], action: AppAction): AppState['ui'] => {\n    return {\n      ...state,\n      isLoading: action.payload as boolean\n    };\n  },\n  ADD_NOTIFICATION: (state: AppState['ui'], action: AppAction): AppState['ui'] => {\n    const notification = action.payload;\n    return {\n      ...state,\n      notifications: [...state.notifications, notification]\n    };\n  },\n  REMOVE_NOTIFICATION: (state: AppState['ui'], action: AppAction): AppState['ui'] => {\n    const id = action.payload as string;\n    return {\n      ...state,\n      notifications: state.notifications.filter(n => n.id !== id)\n    };\n  },\n  CLEAR_NOTIFICATIONS: (state: AppState['ui']): AppState['ui'] => {\n    return {\n      ...state,\n      notifications: []\n    };\n  },\n  OPEN_MODAL: (state: AppState['ui'], action: AppAction): AppState['ui'] => {\n    const { id, title, content } = action.payload;\n    const existingModalIndex = state.modals.findIndex(m => m.id === id);\n\n    if (existingModalIndex !== -1) {\n      const updatedModals = [...state.modals];\n      updatedModals[existingModalIndex] = { id, isOpen: true, title, content };\n      return {\n        ...state,\n        modals: updatedModals\n      };\n    }\n\n    return {\n      ...state,\n      modals: [...state.modals, { id, isOpen: true, title, content }]\n    };\n  },\n  CLOSE_MODAL: (state: AppState['ui'], action: AppAction): AppState['ui'] => {\n    const id = action.payload as string;\n    return {\n      ...state,\n      modals: state.modals.map(modal =>\n        modal.id === id ? { ...modal, isOpen: false } : modal\n      )\n    };\n  },\n  TOGGLE_SIDEBAR: (state: AppState['ui']): AppState['ui'] => {\n    return {\n      ...state,\n      sidebar: {\n        ...state.sidebar,\n        isOpen: !state.sidebar.isOpen\n      }\n    };\n  },\n  SET_SIDEBAR_TAB: (state: AppState['ui'], action: AppAction): AppState['ui'] => {\n    return {\n      ...state,\n      sidebar: {\n        ...state.sidebar,\n        activeTab: action.payload as string\n      }\n    };\n  }\n};\n\nconst userReducers = {\n  UPDATE_PREFERENCES: (state: AppState['user'], action: AppAction): AppState['user'] => {\n    return {\n      ...state,\n      preferences: {\n        ...state.preferences,\n        ...action.payload\n      }\n    };\n  },\n  UPDATE_SESSION: (state: AppState['user'], action: AppAction): AppState['user'] => {\n    return {\n      ...state,\n      session: {\n        ...state.session,\n        ...action.payload,\n        lastActivity: Date.now()\n      }\n    };\n  },\n  INCREMENT_PAGE_VIEWS: (state: AppState['user']): AppState['user'] => {\n    return {\n      ...state,\n      session: {\n        ...state.session,\n        pageViews: state.session.pageViews + 1,\n        lastActivity: Date.now()\n      }\n    };\n  }\n};\n\nconst appReducers = {\n  SET_ONBOARDING_COMPLETE: (state: AppState['app']): AppState['app'] => {\n    return {\n      ...state,\n      hasSeenOnboarding: true\n    };\n  },\n  UPDATE_LAST_VISIT: (state: AppState['app']): AppState['app'] => {\n    return {\n      ...state,\n      lastVisit: Date.now()\n    };\n  },\n  MARK_VISITED: (state: AppState['app']): AppState['app'] => {\n    return {\n      ...state,\n      isFirstVisit: false\n    };\n  }\n};\n\n// ============================================================================\n// App State Manager\n// ============================================================================\n\nexport class AppStateManager {\n  private store: StateStore<AppState>;\n  private debugManager?: StateDebugManager;\n  private persistenceManager?: StatePersistenceManager;\n\n  constructor(config?: {\n    persistence?: PersistenceConfig;\n    debug?: DebugConfig;\n  }) {\n    // Create persistence config\n    const persistenceConfig: PersistenceConfig = {\n      backend: 'localStorage',\n      key: 'app-state',\n      version: 1,\n      compression: true,\n      encryption: {\n        enabled: false\n      },\n      migration: {\n        currentVersion: 1,\n        migrate: (data: any, fromVersion: number, toVersion: number) => {\n          // Handle future migrations here\n          return data;\n        }\n      },\n      backup: {\n        enabled: true,\n        interval: 30, // minutes\n        maxBackups: 5\n      },\n      cleanup: {\n        enabled: true,\n        maxAge: 7, // days\n        maxQuota: 80 // percentage\n      },\n      ...config?.persistence\n    };\n\n    // Create debug config\n    const debugConfig: DebugConfig = {\n      enabled: process.env.NODE_ENV === 'development',\n      visualInspector: true,\n      actionTimeline: true,\n      performanceMonitoring: true,\n      errorTracking: true,\n      stateDiff: true,\n      exportImport: true,\n      maxHistorySize: 100,\n      logLevel: 'info',\n      ...config?.debug\n    };\n\n    // Combine all reducers\n    const allReducers = {\n      ...themeReducers,\n      ...navigationReducers,\n      ...uiReducers,\n      ...userReducers,\n      ...appReducers\n    };\n\n    // Create state store\n    this.store = createStore('app', {\n      initialState: getInitialState(),\n      reducers: allReducers,\n      config: {\n        persistence: {\n          enabled: !!config?.persistence,\n          ...persistenceConfig\n        },\n        debug: debugConfig\n      }\n    });\n\n    // Setup persistence\n    if (config?.persistence) {\n      this.persistenceManager = new StatePersistenceManager(persistenceConfig);\n      this.setupPersistence();\n    }\n\n    // Setup debugging\n    if (config?.debug?.enabled) {\n      this.debugManager = new StateDebugManager(this.store, debugConfig);\n    }\n\n    // Initialize session tracking\n    this.initializeSessionTracking();\n\n    console.log('\uD83D\uDDC4\uFE0F App State Manager initialized');\n  }\n\n  private setupPersistence(): void {\n    if (!this.persistenceManager) return;\n\n    // Save state when it changes\n    this.store.subscribe(async (state) => {\n      try {\n        await this.persistenceManager!.save(state);\n      } catch (error) {\n        console.error('Failed to persist state:', error);\n      }\n    });\n\n    // Load persisted state on initialization\n    this.loadPersistedState();\n  }\n\n  private async loadPersistedState(): Promise<void> {\n    if (!this.persistenceManager) return;\n\n    try {\n      const persistedState = await this.persistenceManager.load();\n      if (persistedState) {\n        this.store.reset(persistedState);\n        console.log('\uD83D\uDDC4\uFE0F Persisted state loaded');\n      }\n    } catch (error) {\n      console.error('Failed to load persisted state:', error);\n    }\n  }\n\n  private initializeSessionTracking(): void {\n    // Update session activity\n    const updateActivity = () => {\n      this.dispatch('UPDATE_SESSION', {\n        timeOnPage: Date.now() - this.getState().user.session.startTime\n      });\n    };\n\n    // Track activity every 30 seconds\n    setInterval(updateActivity, 30000);\n\n    // Track page visibility changes\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        updateActivity();\n      } else {\n        this.dispatch('INCREMENT_PAGE_VIEWS');\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Mark as visited\n    if (this.getState().app.isFirstVisit) {\n      this.dispatch('MARK_VISITED');\n      localStorage.setItem('app-visited', 'true');\n    }\n  }\n\n  // Public API\n  dispatch(action: string | AppAction, payload?: any, meta?: AppAction['meta']): void {\n    if (typeof action === 'string') {\n      this.store.dispatch({\n        type: action,\n        payload,\n        meta,\n        timestamp: Date.now()\n      });\n    } else {\n      this.store.dispatch(action);\n    }\n  }\n\n  getState(): AppState {\n    return this.store.getState();\n  }\n\n  subscribe(listener: (state: AppState) => void): () => void {\n    return this.store.subscribe(listener);\n  }\n\n  select<R>(selector: (state: AppState) => R) {\n    return this.store.select(selector);\n  }\n\n  // Convenience methods for common actions\n  setTheme(mode: ThemeMode): void {\n    this.dispatch('SET_THEME', mode);\n  }\n\n  toggleMobileMenu(): void {\n    this.dispatch('TOGGLE_MOBILE_MENU');\n  }\n\n  setMobileMenuOpen(open: boolean): void {\n    this.dispatch('SET_MOBILE_MENU_OPEN', open);\n  }\n\n  addNotification(type: 'info' | 'success' | 'warning' | 'error', message: string, autoHide?: number): void {\n    const notification = {\n      id: Date.now().toString(),\n      type,\n      message,\n      timestamp: Date.now(),\n      autoHide\n    };\n    this.dispatch('ADD_NOTIFICATION', notification);\n\n    // Auto-hide notification if specified\n    if (autoHide) {\n      setTimeout(() => {\n        this.removeNotification(notification.id);\n      }, autoHide);\n    }\n  }\n\n  removeNotification(id: string): void {\n    this.dispatch('REMOVE_NOTIFICATION', id);\n  }\n\n  setLoading(loading: boolean): void {\n    this.dispatch('SET_LOADING', loading);\n  }\n\n  openModal(id: string, title?: string, content?: any): void {\n    this.dispatch('OPEN_MODAL', { id, title, content });\n  }\n\n  closeModal(id: string): void {\n    this.dispatch('CLOSE_MODAL', id);\n  }\n\n  updateUserPreferences(preferences: Partial<AppState['user']['preferences']>): void {\n    this.dispatch('UPDATE_PREFERENCES', preferences);\n  }\n\n  // Get specific state slices\n  getThemeState(): AppState['theme'] {\n    return this.getState().theme;\n  }\n\n  getNavigationState(): AppState['navigation'] {\n    return this.getState().navigation;\n  }\n\n  getUIState(): AppState['ui'] {\n    return this.getState().ui;\n  }\n\n  getUserState(): AppState['user'] {\n    return this.getState().user;\n  }\n\n  getAppState(): AppState['app'] {\n    return this.getState().app;\n  }\n\n  // Debug and development methods\n  getDebugInfo() {\n    return this.store.getDebugInfo();\n  }\n\n  getMetrics() {\n    return this.store.getMetrics();\n  }\n\n  exportState(): string {\n    return JSON.stringify(this.getState(), null, 2);\n  }\n\n  importState(stateJson: string): void {\n    try {\n      const state = JSON.parse(stateJson);\n      this.store.reset(state);\n      console.log('\uD83D\uDDC4\uFE0F State imported successfully');\n    } catch (error) {\n      console.error('Failed to import state:', error);\n      throw error;\n    }\n  }\n\n  async createBackup(): Promise<string> {\n    if (!this.persistenceManager) {\n      throw new Error('Persistence not configured');\n    }\n\n    const backupInfo = await this.persistenceManager.createBackup();\n    return backupInfo.id;\n  }\n\n  async restoreBackup(backupId: string): Promise<void> {\n    if (!this.persistenceManager) {\n      throw new Error('Persistence not configured');\n    }\n\n    await this.persistenceManager.restoreBackup(backupId);\n  }\n\n  destroy(): void {\n    this.debugManager?.destroy();\n    this.store.destroy();\n  }\n}\n\n// ============================================================================\n// Global Instance\n// ============================================================================\n\nexport const appStateManager = new AppStateManager({\n  persistence: {\n    enabled: true,\n    backend: 'localStorage',\n    compression: true\n  },\n  debug: {\n    enabled: process.env.NODE_ENV === 'development',\n    visualInspector: true,\n    actionTimeline: true\n  }\n});\n\n// ============================================================================\n// Module Integration\n// ============================================================================\n\n/**\n * Theme module integration\n */\nexport const themeStateIntegration = {\n  setTheme: (mode: ThemeMode) => appStateManager.setTheme(mode),\n  getTheme: () => appStateManager.getThemeState(),\n  subscribeToTheme: (callback: (theme: AppState['theme']) => void) =>\n    appStateManager.select(state => state.theme).subscribe(callback)\n};\n\n/**\n * Navigation module integration\n */\nexport const navigationStateIntegration = {\n  toggleMobileMenu: () => appStateManager.toggleMobileMenu(),\n  setMobileMenuOpen: (open: boolean) => appStateManager.setMobileMenuOpen(open),\n  getNavigation: () => appStateManager.getNavigationState(),\n  subscribeToNavigation: (callback: (nav: AppState['navigation']) => void) =>\n    appStateManager.select(state => state.navigation).subscribe(callback)\n};\n\n/**\n * UI module integration\n */\nexport const uiStateIntegration = {\n  setLoading: (loading: boolean) => appStateManager.setLoading(loading),\n  addNotification: (type: 'info' | 'success' | 'warning' | 'error', message: string, autoHide?: number) =>\n    appStateManager.addNotification(type, message, autoHide),\n  removeNotification: (id: string) => appStateManager.removeNotification(id),\n  openModal: (id: string, title?: string, content?: any) => appStateManager.openModal(id, title, content),\n  closeModal: (id: string) => appStateManager.closeModal(id),\n  getUI: () => appStateManager.getUIState(),\n  subscribeToUI: (callback: (ui: AppState['ui']) => void) =>\n    appStateManager.select(state => state.ui).subscribe(callback)\n};\n\n/**\n * User preferences integration\n */\nexport const userStateIntegration = {\n  updatePreferences: (preferences: Partial<AppState['user']['preferences']>) =>\n    appStateManager.updateUserPreferences(preferences),\n  getUser: () => appStateManager.getUserState(),\n  subscribeToUser: (callback: (user: AppState['user']) => void) =>\n    appStateManager.select(state => state.user).subscribe(callback)\n};\n\nexport default appStateManager;", "/**\n * Dark mode theme management\n *\n * Features:\n * - Support light, dark, and system preference modes\n * - Persist user preference in LocalStorage\n * - Smooth transitions between themes\n * - Accessibility compliant (focus indicators, ARIA labels)\n * - Cross-browser compatibility\n * - System preference detection\n */\n\nimport { qsSafe, addEventListener } from './utils/dom';\nimport { registerCleanup } from '../core/cleanup-manager';\nimport { themeStateIntegration } from '../core/app-state';\nimport type { ThemeMode } from '../core/types';\n\nexport type { ThemeMode };\n\nconst STORAGE_KEY = 'theme';\nconst THEME_ATTRIBUTE = 'data-theme';\nconst THEME_TRANSITION_DURATION = 300; // ms\n\n/**\n * Get system preferred theme\n */\nconst getSystemTheme = (): ThemeMode => {\n  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n    return 'dark';\n  }\n  return 'light';\n};\n\n/**\n * Get stored theme from localStorage\n */\nexport const getStoredTheme = (): ThemeMode => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY) as ThemeMode;\n    if (stored && ['light', 'dark', 'system'].includes(stored)) {\n      return stored;\n    }\n  } catch (error) {\n    console.warn('Failed to read theme from localStorage:', error);\n  }\n  return 'system';\n};\n\n/**\n * Get current active theme\n */\nexport const getCurrentTheme = (): ThemeMode => {\n  const stored = getStoredTheme();\n  if (stored === 'system') {\n    return getSystemTheme();\n  }\n  return stored;\n};\n\n/**\n * Apply theme to document\n */\nexport const applyTheme = (theme: ThemeMode): void => {\n  const actualTheme = theme === 'system' ? getSystemTheme() : theme;\n  document.documentElement.setAttribute(THEME_ATTRIBUTE, actualTheme);\n\n  // Update theme toggle button if it exists\n  updateToggleButton(actualTheme);\n\n  // Add transition class for smooth theme switching\n  document.documentElement.classList.add('theme-transitioning');\n\n  // Remove transition class after animation completes\n  setTimeout(() => {\n    document.documentElement.classList.remove('theme-transitioning');\n    // Notify state manager that transition is complete\n    if (typeof window !== 'undefined' && (window as any).__APP_STATE_MANAGER__) {\n      (window as any).__APP_STATE_MANAGER__.dispatch('THEME_TRANSITION_END');\n    }\n  }, THEME_TRANSITION_DURATION);\n\n  console.log(`\uD83C\uDFA8 Theme applied: ${actualTheme} (stored: ${theme})`);\n};\n\n/**\n * Store theme preference\n */\nconst storeTheme = (theme: ThemeMode): void => {\n  try {\n    localStorage.setItem(STORAGE_KEY, theme);\n  } catch (error) {\n    console.warn('Failed to save theme to localStorage:', error);\n  }\n};\n\n/**\n * Toggle between light and dark themes\n */\nexport const toggleTheme = (): void => {\n  const current = getCurrentTheme();\n  const next: ThemeMode = current === 'light' ? 'dark' : 'light';\n\n  // Use state manager if available\n  if (typeof window !== 'undefined' && (window as any).__APP_STATE_MANAGER__) {\n    (window as any).__APP_STATE_MANAGER__.setTheme(next);\n  } else {\n    // Fallback to localStorage\n    const stored = getStoredTheme();\n    storeTheme(stored === 'system' ? next : 'system');\n    applyTheme(stored === 'system' ? next : 'system');\n  }\n};\n\n/**\n * Set specific theme\n */\nexport const setTheme = (theme: ThemeMode): void => {\n  // Use state manager if available\n  if (typeof window !== 'undefined' && (window as any).__APP_STATE_MANAGER__) {\n    (window as any).__APP_STATE_MANAGER__.setTheme(theme);\n  } else {\n    // Fallback to localStorage\n    storeTheme(theme);\n    applyTheme(theme);\n  }\n};\n\n/**\n * Update toggle button state\n */\nconst updateToggleButton = (actualTheme: ThemeMode): void => {\n  const toggle = qsSafe('.theme-toggle');\n  if (!toggle) return;\n\n  const isActive = actualTheme === 'dark';\n  toggle.classList.toggle('active', isActive);\n  toggle.setAttribute('aria-pressed', isActive.toString());\n\n  // Update button text/icon if needed\n  const icon = toggle.querySelector('.theme-icon');\n  if (icon) {\n    icon.textContent = actualTheme === 'dark' ? '\uD83C\uDF19' : '\u2600\uFE0F';\n  }\n\n  // Update button title\n  toggle.setAttribute('title', actualTheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode');\n};\n\n/**\n * Listen for system theme changes\n */\nexport const watchSystemTheme = (): void => {\n  if (!window.matchMedia) return;\n\n  const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n  const handleChange = (): void => {\n    const stored = getStoredTheme();\n    if (stored === 'system') {\n      applyTheme('system');\n    }\n  };\n\n  // Modern browsers - addEventListener is automatically cleaned up\n  if (mediaQuery.addEventListener) {\n    // Since this is a native browser API, we need manual cleanup registration\n    const cleanup = () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n\n    // Register with cleanup manager\n    registerCleanup(cleanup, {\n      description: 'System theme watcher',\n      priority: 2 // High priority - system watchers should be cleaned up early\n    });\n\n    mediaQuery.addEventListener('change', handleChange);\n  } else {\n    // Legacy support - addListener is automatically cleaned up\n    const cleanup = () => {\n      mediaQuery.removeListener(handleChange);\n    };\n\n    // Register with cleanup manager\n    registerCleanup(cleanup, {\n      description: 'System theme watcher (legacy)',\n      priority: 2\n    });\n\n    mediaQuery.addListener(handleChange);\n  }\n\n  console.log('\uD83D\uDC40 System theme watcher initialized');\n};\n\n/**\n * Create theme toggle button\n */\nconst createThemeToggleButton = (): HTMLElement => {\n  const button = document.createElement('button');\n  button.className = 'theme-toggle';\n  button.setAttribute('type', 'button');\n  button.setAttribute('aria-label', 'Toggle dark mode');\n  button.setAttribute('title', 'Toggle dark mode');\n  button.innerHTML = '<span class=\"theme-icon\">\uD83C\uDF19</span>';\n\n  return button;\n};\n\n/**\n * Setup theme toggle button\n */\nconst setupThemeToggleButton = (): void => {\n  // Check if button already exists\n  const existingButton = qsSafe('.theme-toggle');\n  if (existingButton) {\n    // Update existing button state\n    updateToggleButton(getCurrentTheme());\n    return;\n  }\n\n  // Find a suitable place to add the button\n  const header = qsSafe('.site-header, header, .site-nav');\n  if (!header) {\n    console.warn('\u26A0\uFE0F Could not find suitable location for theme toggle button');\n    return;\n  }\n\n  const button = createThemeToggleButton();\n\n  // Add button to header\n  header.appendChild(button);\n\n  // Add click handler\n  const cleanup = addEventListener(button, 'click', (e) => {\n    e.preventDefault();\n    toggleTheme();\n  });\n\n  // Store cleanup function\n  (button as any)._cleanup = cleanup;\n\n  // Initialize button state\n  updateToggleButton(getCurrentTheme());\n\n  console.log('\uD83C\uDFA8 Theme toggle button created and added to header');\n};\n\n/**\n * Initialize theme functionality\n */\nexport const initTheme = (defaultTheme?: ThemeMode): void => {\n  // Apply initial theme\n  const theme = defaultTheme || getStoredTheme();\n  applyTheme(theme);\n\n  // Watch for system theme changes\n  watchSystemTheme();\n\n  // Setup theme toggle button\n  setupThemeToggleButton();\n\n  console.log(`\uD83C\uDFA8 Theme functionality initialized with mode: ${theme}`);\n};\n\n/**\n * Cleanup theme functionality (for testing)\n */\nexport const cleanupTheme = (): void => {\n  const button = qsSafe('.theme-toggle');\n  if (button) {\n    const cleanup = (button as any)._cleanup;\n    if (typeof cleanup === 'function') {\n      cleanup();\n    }\n    button.remove();\n  }\n\n  console.log('\uD83E\uDDF9 Theme functionality cleaned up');\n};\n\n/**\n * Theme styles are now loaded from external CSS files\n * This function is kept for backward compatibility but no longer does anything\n */\nexport const addThemeStyles = (): void => {\n  // Styles are now in src/css/theme.css and loaded via the build system\n  console.log('\uD83C\uDFA8 Theme styles loaded from external CSS file');\n};", "/**\n * Functional Configuration Service\n *\n * Replaces the singleton pattern with a functional approach that provides:\n * - Immutable configuration objects\n * - Functional API for configuration access\n * - Built-in caching with configurable TTL\n * - Easy testing with dependency injection\n * - Memory-efficient configuration management\n */\n\nimport type { SiteConfig, ThemeMode, Environment, FeatureFlags } from '../core/types';\n\n// ============================================================================\n// Configuration Types\n// ============================================================================\n\n/**\n * Configuration source types\n */\nexport type ConfigSource = 'script' | 'dom-inspection' | 'fallback';\n\n/**\n * Configuration cache entry\n */\ninterface ConfigCacheEntry {\n  config: SiteConfig;\n  timestamp: number;\n  source: ConfigSource;\n  ttl: number;\n}\n\n/**\n * Configuration service options\n */\nexport interface ConfigServiceOptions {\n  /** Cache time-to-live in milliseconds (0 = no caching) */\n  cacheTTL?: number;\n  /** Enable development logging */\n  debug?: boolean;\n  /** Custom selectors for DOM inspection */\n  selectors?: typeof DEFAULT_SELECTORS;\n}\n\n/**\n * Configuration builder for creating custom configurations\n */\nexport interface ConfigBuilder {\n  theme(theme: ThemeMode): ConfigBuilder;\n  environment(env: Environment): ConfigBuilder;\n  isPost(isPost: boolean): ConfigBuilder;\n  isHomePage(isHomePage: boolean): ConfigBuilder;\n  language(lang: string): ConfigBuilder;\n  baseUrl(url: string): ConfigBuilder;\n  features(features: Partial<FeatureFlags>): ConfigBuilder;\n  build(): SiteConfig;\n}\n\n// ============================================================================\n// Default Configuration\n// ============================================================================\n\nconst DEFAULT_SELECTORS = {\n  siteConfig: '#site-config',\n  searchInput: '#search-input',\n  preCode: 'pre code',\n  shareLinks: '.share-links',\n  comments: '.comments'\n} as const;\n\nconst DEFAULT_FEATURES: FeatureFlags = {\n  searchEnabled: false,\n  tocEnabled: false,\n  copyCodeEnabled: false,\n  shareButtonsEnabled: false,\n  analyticsEnabled: false,\n  commentsEnabled: false,\n  notificationsEnabled: false,\n  themeCustomizationEnabled: false,\n  keyboardShortcutsEnabled: false\n};\n\nconst DEFAULT_CONFIG: Omit<SiteConfig, 'theme' | 'environment' | 'language' | 'baseUrl' | 'features'> = {\n  isPost: false,\n  isHomePage: false,\n  title: '',\n  description: '',\n  author: '',\n  navigation: {\n    items: [],\n    mobile: false,\n    search: false\n  },\n  social: {},\n  performance: {\n    bundleSize: 0,\n    buildTime: 0\n  },\n  seo: {\n    titleTemplate: '',\n    description: '',\n    image: '',\n    keywords: []\n  }\n};\n\n// ============================================================================\n// Utility Functions\n// ============================================================================\n\n/**\n * Get current environment from various sources\n */\nconst getCurrentEnvironment = (): Environment => {\n  // Check Node.js environment variable first\n  if (typeof process !== 'undefined' && process.env?.NODE_ENV) {\n    return process.env.NODE_ENV as Environment;\n  }\n\n  // Fallback to Jekyll environment\n  const jekyllEnv = (window as any).jekyllEnvironment;\n  if (jekyllEnv) {\n    return jekyllEnv === 'production' ? 'production' : 'development';\n  }\n\n  return 'development';\n};\n\n/**\n * Get base URL for the site\n */\nconst getBaseUrl = (): string => {\n  // Check for base element\n  const baseElement = document.querySelector('base');\n  if (baseElement?.getAttribute('href')) {\n    return baseElement.getAttribute('href')!;\n  }\n\n  // Try to get from site config script\n  const siteConfigScript = document.querySelector<HTMLScriptElement>(DEFAULT_SELECTORS.siteConfig);\n  if (siteConfigScript?.textContent) {\n    try {\n      const config = JSON.parse(siteConfigScript.textContent);\n      if (config.baseUrl) {\n        return config.baseUrl;\n      }\n    } catch {\n      // Ignore parse errors\n    }\n  }\n\n  return window.location.origin;\n};\n\n/**\n * Detect features from DOM\n */\nconst detectFeatures = (selectors: typeof DEFAULT_SELECTORS): FeatureFlags => ({\n  searchEnabled: !!document.querySelector(selectors.searchInput),\n  tocEnabled: document.body.classList.contains('post'),\n  copyCodeEnabled: !!document.querySelector(selectors.preCode),\n  shareButtonsEnabled: !!document.querySelector(selectors.shareLinks),\n  analyticsEnabled: getCurrentEnvironment() === 'production',\n  commentsEnabled: !!document.querySelector(selectors.comments),\n  notificationsEnabled: false, // Could be detected later\n  themeCustomizationEnabled: false, // Could be detected later\n  keyboardShortcutsEnabled: false // Could be detected later\n});\n\n/**\n * Extract configuration from script tag\n */\nconst extractFromScript = (selectors: typeof DEFAULT_SELECTORS): Partial<SiteConfig> | null => {\n  const script = document.querySelector<HTMLScriptElement>(selectors.siteConfig);\n\n  if (!script?.textContent) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(script.textContent);\n  } catch (error) {\n    console.warn('Failed to parse site config from script:', error);\n    return null;\n  }\n};\n\n/**\n * Create configuration from DOM inspection\n */\nconst createFromDOM = (selectors: typeof DEFAULT_SELECTORS): SiteConfig => {\n  return {\n    ...DEFAULT_CONFIG,\n    theme: 'system' as ThemeMode,\n    environment: getCurrentEnvironment(),\n    isPost: document.body.classList.contains('post'),\n    isHomePage: document.body.classList.contains('home'),\n    language: document.documentElement.lang || 'en',\n    baseUrl: getBaseUrl(),\n    features: detectFeatures(selectors)\n  };\n};\n\n/**\n * Enrich partial configuration with derived values\n */\nconst enrichConfig = (\n  baseConfig: Partial<SiteConfig>,\n  selectors: typeof DEFAULT_SELECTORS\n): SiteConfig => {\n  return {\n    ...DEFAULT_CONFIG,\n    theme: baseConfig.theme || 'system',\n    environment: getCurrentEnvironment(),\n    isPost: baseConfig.isPost ?? document.body.classList.contains('post'),\n    isHomePage: baseConfig.isHomePage ?? document.body.classList.contains('home'),\n    language: baseConfig.language || document.documentElement.lang || 'en',\n    baseUrl: baseConfig.baseUrl || getBaseUrl(),\n    features: {\n      ...DEFAULT_FEATURES,\n      ...detectFeatures(selectors),\n      ...baseConfig.features\n    },\n    // Include any additional properties from base config\n    ...baseConfig\n  };\n};\n\n// ============================================================================\n// Configuration Cache\n// ============================================================================\n\nclass ConfigCache {\n  private cache = new Map<string, ConfigCacheEntry>();\n  private defaultTTL: number;\n\n  constructor(defaultTTL: number = 5 * 60 * 1000) { // 5 minutes default\n    this.defaultTTL = defaultTTL;\n  }\n\n  get(key: string): SiteConfig | null {\n    const entry = this.cache.get(key);\n\n    if (!entry) {\n      return null;\n    }\n\n    // Check if entry has expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.config;\n  }\n\n  set(key: string, config: SiteConfig, ttl?: number): void {\n    this.cache.set(key, {\n      config,\n      timestamp: Date.now(),\n      source: 'script' as ConfigSource, // Will be updated by caller\n      ttl: ttl ?? this.defaultTTL\n    });\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  has(key: string): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    // Check if entry has expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  getStats(): {\n    size: number;\n    entries: Array<{\n      key: string;\n      age: number;\n      source: ConfigSource;\n      ttl: number;\n    }>;\n  } {\n    const now = Date.now();\n    const entries = Array.from(this.cache.entries()).map(([key, entry]) => ({\n      key,\n      age: now - entry.timestamp,\n      source: entry.source,\n      ttl: entry.ttl\n    }));\n\n    return {\n      size: this.cache.size,\n      entries\n    };\n  }\n}\n\n// ============================================================================\n// Configuration Service Factory\n// ============================================================================\n\n/**\n * Create a configuration service instance\n */\nexport const createConfigService = (options: ConfigServiceOptions = {}) => {\n  const {\n    cacheTTL = 5 * 60 * 1000, // 5 minutes\n    debug = process.env.NODE_ENV === 'development',\n    selectors = DEFAULT_SELECTORS\n  } = options;\n\n  const cache = new ConfigCache(cacheTTL);\n  const cacheKey = 'site-config';\n\n  /**\n   * Get site configuration with caching\n   */\n  const getSiteConfig = (): SiteConfig => {\n    // Check cache first\n    const cached = cache.get(cacheKey);\n    if (cached) {\n      if (debug) {\n        console.log('\uD83D\uDCCB Using cached configuration');\n      }\n      return cached;\n    }\n\n    // Try to extract from script\n    const scriptConfig = extractFromScript(selectors);\n    if (scriptConfig) {\n      const config = enrichConfig(scriptConfig, selectors);\n      cache.set(cacheKey, config);\n\n      if (debug) {\n        console.log('\uD83D\uDCCB Configuration loaded from script');\n      }\n\n      return config;\n    }\n\n    // Fallback to DOM inspection\n    const domConfig = createFromDOM(selectors);\n    cache.set(cacheKey, domConfig);\n\n    if (debug) {\n      console.log('\uD83D\uDCCB Configuration created from DOM inspection');\n    }\n\n    return domConfig;\n  };\n\n  /**\n   * Get specific configuration value\n   */\n  const get = <K extends keyof SiteConfig>(key: K): SiteConfig[K] => {\n    return getSiteConfig()[key];\n  };\n\n  /**\n   * Get current theme mode\n   */\n  const getCurrentTheme = (): ThemeMode => {\n    return get('theme');\n  };\n\n  /**\n   * Get current environment\n   */\n  const getEnvironment = (): Environment => {\n    return get('environment');\n  };\n\n  /**\n   * Check if running in production\n   */\n  const isProduction = (): boolean => {\n    return getEnvironment() === 'production';\n  };\n\n  /**\n   * Check if a feature is enabled\n   */\n  const isFeatureEnabled = <K extends keyof FeatureFlags>(feature: K): boolean => {\n    return get('features')[feature] || false;\n  };\n\n  /**\n   * Get all feature flags\n   */\n  const getFeatures = (): FeatureFlags => {\n    return get('features');\n  };\n\n  /**\n   * Force refresh configuration from source\n   */\n  const refresh = (): SiteConfig => {\n    cache.delete(cacheKey);\n    return getSiteConfig();\n  };\n\n  /**\n   * Reset configuration cache\n   */\n  const resetCache = (): void => {\n    cache.clear();\n    if (debug) {\n      console.log('\uD83D\uDCCB Configuration cache cleared');\n    }\n  };\n\n  /**\n   * Get cache statistics\n   */\n  const getCacheStats = () => {\n    return cache.getStats();\n  };\n\n  /**\n   * Create a configuration builder\n   */\n  const createBuilder = (): ConfigBuilder => {\n    let config: Partial<SiteConfig> = {};\n\n    return {\n      theme(theme: ThemeMode): ConfigBuilder {\n        config.theme = theme;\n        return this;\n      },\n\n      environment(env: Environment): ConfigBuilder {\n        config.environment = env;\n        return this;\n      },\n\n      isPost(isPost: boolean): ConfigBuilder {\n        config.isPost = isPost;\n        return this;\n      },\n\n      isHomePage(isHomePage: boolean): ConfigBuilder {\n        config.isHomePage = isHomePage;\n        return this;\n      },\n\n      language(lang: string): ConfigBuilder {\n        config.language = lang;\n        return this;\n      },\n\n      baseUrl(url: string): ConfigBuilder {\n        config.baseUrl = url;\n        return this;\n      },\n\n      features(features: Partial<FeatureFlags>): ConfigBuilder {\n        config.features = { ...DEFAULT_FEATURES, ...features };\n        return this;\n      },\n\n      build(): SiteConfig {\n        return enrichConfig(config, selectors);\n      }\n    };\n  };\n\n  /**\n   * Create a configuration override for testing\n   */\n  const createOverride = (override: Partial<SiteConfig>): SiteConfig => {\n    return enrichConfig(override, selectors);\n  };\n\n  return {\n    // Core methods\n    getSiteConfig,\n    get,\n    getCurrentTheme,\n    getEnvironment,\n    isProduction,\n    isFeatureEnabled,\n    getFeatures,\n\n    // Cache management\n    refresh,\n    resetCache,\n    getCacheStats,\n\n    // Builders\n    createBuilder,\n    createOverride,\n\n    // Utilities\n    selectors,\n    options\n  };\n};\n\n// ============================================================================\n// Default Service Instance\n// ============================================================================\n\n/**\n * Default configuration service instance\n * This can be used directly in most cases\n */\nexport const configService = createConfigService({\n  cacheTTL: 5 * 60 * 1000, // 5 minutes\n  debug: process.env.NODE_ENV === 'development'\n});\n\n// ============================================================================\n// Convenience Functions\n// ============================================================================\n\n/**\n * Get site configuration (using default service)\n */\nexport const getSiteConfig = (): SiteConfig => configService.getSiteConfig();\n\n/**\n * Get current theme mode\n */\nexport const getCurrentTheme = (): ThemeMode => configService.getCurrentTheme();\n\n/**\n * Get current environment\n */\nexport const getEnvironment = (): Environment => configService.getEnvironment();\n\n/**\n * Check if running in production\n */\nexport const isProduction = (): boolean => configService.isProduction();\n\n/**\n * Check if a feature is enabled\n */\nexport const isFeatureEnabled = <K extends keyof FeatureFlags>(feature: K): boolean => {\n  return configService.isFeatureEnabled(feature);\n};\n\n/**\n * Get all feature flags\n */\nexport const getFeatures = (): FeatureFlags => configService.getFeatures();\n\n/**\n * Refresh configuration\n */\nexport const refreshConfig = (): SiteConfig => configService.refresh();\n\n// ============================================================================\n// Legacy Compatibility (deprecated)\n// ============================================================================\n\n/**\n * @deprecated Use createConfigService() or the default configService instead\n */\nexport class ConfigService {\n  private static service = createConfigService();\n\n  public static getInstance() {\n    return ConfigService.service;\n  }\n\n  public getSiteConfig() {\n    return ConfigService.service.getSiteConfig();\n  }\n\n  public isProduction() {\n    return ConfigService.service.isProduction();\n  }\n\n  public isFeatureEnabled(feature: keyof FeatureFlags): boolean {\n    return ConfigService.service.isFeatureEnabled(feature);\n  }\n\n  public getCurrentTheme(): ThemeMode {\n    return ConfigService.service.getCurrentTheme();\n  }\n\n  public resetCache(): void {\n    ConfigService.service.resetCache();\n  }\n}", "/**\n * Mobile navigation functionality\n *\n * Features:\n * - Hamburger menu for mobile devices\n * - Smooth slide-in/out animations\n * - Click-outside-to-close functionality\n * - Keyboard navigation support\n * - Touch-friendly interactions\n * - Accessibility compliant\n * - Body scroll lock when menu is open\n */\n\nimport { qsSafe, addEventListener } from './utils/dom';\nimport { navigationStateIntegration } from '../core/app-state';\n\nconst MOBILE_BREAKPOINT = 768; // px\nconst ANIMATION_DURATION = 300; // ms\nconst FOCUSABLE_ELEMENTS = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n\n/**\n * Check if device is mobile\n */\nconst isMobile = (): boolean => {\n  return window.innerWidth <= MOBILE_BREAKPOINT ||\n       ('ontouchstart' in window) ||\n       (navigator.maxTouchPoints > 0);\n};\n\n/**\n * Toggle body scroll lock\n */\nconst toggleBodyScrollLock = (lock: boolean): void => {\n  const body = document.body;\n\n  if (lock) {\n    body.classList.add('nav-open');\n    body.style.overflow = 'hidden';\n    body.style.position = 'fixed';\n    body.style.width = '100%';\n    body.style.top = `-${window.scrollY}px`;\n  } else {\n    const scrollY = Math.abs(parseInt(body.style.top || '0', 10));\n    body.classList.remove('nav-open');\n    body.style.overflow = '';\n    body.style.position = '';\n    body.style.width = '';\n    body.style.top = '';\n    window.scrollTo(0, scrollY);\n  }\n};\n\n/**\n * Close mobile menu\n */\nconst closeMobileMenu = (): void => {\n  const toggle = qsSafe('.nav-toggle') as HTMLElement;\n  const menu = qsSafe('.nav-mobile') as HTMLElement;\n\n  if (!toggle || !menu) return;\n\n  // Update toggle state\n  toggle.classList.remove('active');\n  toggle.setAttribute('aria-expanded', 'false');\n\n  // Close menu\n  menu.classList.remove('active');\n\n  // Restore body scroll\n  toggleBodyScrollLock(false);\n\n  // Update state manager\n  if (typeof window !== 'undefined' && (window as any).__APP_STATE_MANAGER__) {\n    (window as any).__APP_STATE_MANAGER__.setMobileMenuOpen(false);\n  }\n\n  // Focus back to toggle button\n  setTimeout(() => {\n    toggle.focus();\n  }, ANIMATION_DURATION);\n\n  console.log('\uD83D\uDCF1 Mobile menu closed');\n};\n\n/**\n * Open mobile menu\n */\nconst openMobileMenu = (): void => {\n  const toggle = qsSafe('.nav-toggle') as HTMLElement;\n  const menu = qsSafe('.nav-mobile') as HTMLElement;\n\n  if (!toggle || !menu) return;\n\n  // Update toggle state\n  toggle.classList.add('active');\n  toggle.setAttribute('aria-expanded', 'true');\n\n  // Open menu\n  menu.classList.add('active');\n\n  // Prevent body scroll\n  toggleBodyScrollLock(true);\n\n  // Update state manager\n  if (typeof window !== 'undefined' && (window as any).__APP_STATE_MANAGER__) {\n    (window as any).__APP_STATE_MANAGER__.setMobileMenuOpen(true);\n  }\n\n  // Focus first menu item\n  setTimeout(() => {\n    const firstMenuItem = menu.querySelector(FOCUSABLE_ELEMENTS) as HTMLElement;\n    if (firstMenuItem) {\n      firstMenuItem.focus();\n    }\n  }, 100);\n\n  console.log('\uD83D\uDCF1 Mobile menu opened');\n};\n\n/**\n * Toggle mobile menu\n */\nconst toggleMobileMenu = (): void => {\n  // Use state manager if available\n  if (typeof window !== 'undefined' && (window as any).__APP_STATE_MANAGER__) {\n    (window as any).__APP_STATE_MANAGER__.toggleMobileMenu();\n  } else {\n    // Fallback to DOM-based toggle\n    const toggle = qsSafe('.nav-toggle') as HTMLElement;\n    if (!toggle) return;\n\n    const isOpen = toggle.classList.contains('active');\n\n    if (isOpen) {\n      closeMobileMenu();\n    } else {\n      openMobileMenu();\n    }\n  }\n};\n\n/**\n * Handle click outside menu\n */\nconst handleOutsideClick = (event: MouseEvent): void => {\n  const menu = qsSafe('.nav-mobile');\n  const toggle = qsSafe('.nav-toggle');\n\n  if (!menu || !toggle) return;\n\n  const target = event.target as Node;\n  const isClickInsideMenu = menu.contains(target);\n  const isClickOnToggle = toggle.contains(target);\n\n  if (!isClickInsideMenu && !isClickOnToggle) {\n    closeMobileMenu();\n  }\n};\n\n/**\n * Handle escape key\n */\nconst handleEscapeKey = (event: KeyboardEvent): void => {\n  if (event.key === 'Escape') {\n    closeMobileMenu();\n  }\n};\n\n/**\n * Setup mobile navigation toggle\n */\nconst setupMobileToggle = (): void => {\n  const toggle = qsSafe('.nav-toggle') as HTMLElement;\n  if (!toggle) {\n    console.warn('\u26A0\uFE0F Mobile navigation toggle button not found');\n    return;\n  }\n\n  // Set initial state\n  toggle.classList.remove('active');\n  toggle.setAttribute('aria-expanded', 'false');\n  toggle.setAttribute('aria-controls', 'mobile-menu');\n  toggle.setAttribute('aria-label', 'Toggle navigation menu');\n\n  // Add click handler\n  const cleanup = addEventListener(toggle, 'click', (e) => {\n    e.preventDefault();\n    toggleMobileMenu();\n  });\n\n  // Store cleanup function\n  (toggle as any)._cleanup = cleanup;\n\n  console.log('\uD83D\uDCF1 Mobile navigation toggle setup complete');\n};\n\n/**\n * Setup click outside to close\n */\nconst setupClickOutsideToClose = (): void => {\n  const cleanup = addEventListener(document as any, 'click', handleOutsideClick);\n  (document as any)._clickOutsideCleanup = cleanup;\n  console.log('\uD83D\uDCF1 Click outside to close functionality setup');\n};\n\n/**\n * Setup keyboard navigation\n */\nconst setupKeyboardNavigation = (): void => {\n  const menu = qsSafe('.nav-mobile') as HTMLElement;\n  if (!menu) return;\n\n  // Add keydown handler for trap focus\n  const keydownHandler = (e: KeyboardEvent): void => {\n    if (e.key === 'Tab') {\n      const focusableElements = Array.from(menu.querySelectorAll(FOCUSABLE_ELEMENTS)) as HTMLElement[];\n      const firstElement = focusableElements[0];\n      const lastElement = focusableElements[focusableElements.length - 1];\n\n      if (e.shiftKey) {\n        if (document.activeElement === firstElement && firstElement) {\n          e.preventDefault();\n          lastElement?.focus();\n        }\n      } else {\n        if (document.activeElement === lastElement && lastElement) {\n          e.preventDefault();\n          firstElement?.focus();\n        }\n      }\n    }\n  };\n\n  const cleanup = addEventListener(menu, 'keydown', keydownHandler);\n  (menu as any)._keyboardCleanup = cleanup;\n\n  console.log('\uD83D\uDCF1 Keyboard navigation setup complete');\n};\n\n/**\n * Setup escape key handler\n */\nconst setupEscapeKeyHandler = (): void => {\n  const cleanup = addEventListener(document as any, 'keydown', handleEscapeKey);\n  (document as any)._escapeCleanup = cleanup;\n  console.log('\uD83D\uDCF1 Escape key handler setup complete');\n};\n\n/**\n * Setup responsive behavior\n */\nconst setupResponsiveBehavior = (): void => {\n  let isCurrentlyMobile = isMobile();\n\n  const handleResize = (): void => {\n    const isNowMobile = isMobile();\n\n    // If switching from desktop to mobile and menu is open, close it\n    if (!isCurrentlyMobile && isNowMobile) {\n      const menu = qsSafe('.nav-mobile') as HTMLElement;\n      if (menu && menu.classList.contains('active')) {\n        closeMobileMenu();\n      }\n    }\n\n    // If switching from mobile to desktop, ensure menu is closed\n    if (isCurrentlyMobile && !isNowMobile) {\n      closeMobileMenu();\n    }\n\n    isCurrentlyMobile = isNowMobile;\n  };\n\n  // Debounce resize handler\n  let resizeTimeout: NodeJS.Timeout;\n  const debouncedResize = () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(handleResize, 150);\n  };\n\n  const cleanup = addEventListener(window as any, 'resize', debouncedResize);\n  (window as any)._resizeCleanup = cleanup;\n\n  console.log('\uD83D\uDCF1 Responsive behavior setup complete');\n};\n\n/**\n * Create mobile navigation toggle button\n */\nconst createMobileToggle = (): HTMLElement => {\n  const button = document.createElement('button');\n  button.className = 'nav-toggle';\n  button.setAttribute('type', 'button');\n  button.setAttribute('aria-label', 'Toggle navigation menu');\n  button.setAttribute('aria-controls', 'mobile-menu');\n  button.setAttribute('aria-expanded', 'false');\n  button.innerHTML = `\n    <span class=\"hamburger\">\n      <span class=\"hamburger-line\"></span>\n      <span class=\"hamburger-line\"></span>\n      <span class=\"hamburger-line\"></span>\n    </span>\n  `;\n  return button;\n};\n\n/**\n * Setup mobile navigation menu\n */\nconst setupMobileMenu = (): void => {\n  // Check if mobile menu already exists\n  const existingMenu = qsSafe('.nav-mobile');\n  if (existingMenu) {\n    console.log('\uD83D\uDCF1 Mobile menu already exists');\n    return;\n  }\n\n  // Create mobile menu if it doesn't exist\n  const menu = document.createElement('nav');\n  menu.className = 'nav-mobile';\n  menu.setAttribute('id', 'mobile-menu');\n  menu.setAttribute('role', 'navigation');\n  menu.setAttribute('aria-label', 'Mobile navigation');\n\n  // Copy navigation items from desktop menu\n  const desktopNav = qsSafe('.site-nav, .nav-links');\n  if (desktopNav) {\n    const navLinks = desktopNav.cloneNode(true);\n    menu.appendChild(navLinks);\n  }\n\n  // Add menu to page\n  const header = qsSafe('.site-header, header');\n  if (header) {\n    header.appendChild(menu);\n  }\n\n  console.log('\uD83D\uDCF1 Mobile navigation menu created');\n};\n\n/**\n * Initialize mobile navigation\n */\nexport const initNavigation = (): void => {\n  // Only initialize on mobile devices\n  if (!isMobile()) {\n    console.log('\uD83D\uDCF1 Desktop device detected - mobile navigation not initialized');\n    return;\n  }\n\n  // Setup mobile menu\n  setupMobileMenu();\n\n  // Setup toggle button (check if exists or create)\n  let toggle = qsSafe('.nav-toggle') as HTMLElement;\n  if (!toggle) {\n    toggle = createMobileToggle();\n    const header = qsSafe('.site-header, header');\n    if (header) {\n      header.appendChild(toggle);\n    }\n  }\n\n  // Setup all functionality\n  setupMobileToggle();\n  setupClickOutsideToClose();\n  setupKeyboardNavigation();\n  setupEscapeKeyHandler();\n  setupResponsiveBehavior();\n\n  // Make mobile menu visible\n  const menu = qsSafe('.nav-mobile') as HTMLElement;\n  if (menu) {\n    menu.style.display = 'block';\n  }\n\n  console.log('\uD83D\uDCF1 Mobile navigation initialized successfully');\n};\n\n/**\n * Cleanup mobile navigation\n */\nexport const cleanupMobileNav = (): void => {\n  // Remove event listeners\n  const cleanupFunctions = [\n    (document as any)._clickOutsideCleanup,\n    (document as any)._escapeCleanup,\n    (window as any)._resizeCleanup\n  ];\n\n  cleanupFunctions.forEach(cleanup => {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    }\n  });\n\n  // Remove toggle button cleanup\n  const toggle = qsSafe('.nav-toggle') as HTMLElement;\n  if (toggle && (toggle as any)._cleanup) {\n    (toggle as any)._cleanup();\n  }\n\n  // Remove menu cleanup\n  const menu = qsSafe('.nav-mobile') as HTMLElement;\n  if (menu && (menu as any)._keyboardCleanup) {\n    (menu as any)._keyboardCleanup();\n  }\n\n  console.log('\uD83D\uDCF1 Mobile navigation cleaned up');\n};\n\n/**\n * Alias for backward compatibility\n */\nexport { initNavigation as initMobileNav };\n\n/**\n * Mobile navigation styles are now loaded from external CSS files\n * This function is kept for backward compatibility but no longer does anything\n */\nexport const addMobileNavStyles = (): void => {\n  // Styles are now in src/css/components.css and loaded via the build system\n  console.log('\uD83D\uDCF1 Mobile navigation styles loaded from external CSS file');\n};", "/**\n * Copy code to clipboard functionality\n *\n * Features:\n * - Copy code blocks with clipboard API\n * - Visual feedback for success/error states\n * - Fallback method for older browsers\n * - Touch-friendly interactions\n * - Accessibility support\n */\n\nimport { qsa, create, addEventListener } from './utils/dom';\n\nconst COPY_BUTTON_CLASS = 'copy-button';\nconst COPY_SUCCESS_CLASS = 'copied';\nconst COPY_ERROR_CLASS = 'copy-error';\nconst COPY_TIMEOUT = 2000;\n\n/**\n * Copy text to clipboard with fallback\n */\nconst copyToClipboard = async (text: string): Promise<boolean> => {\n  try {\n    // Modern clipboard API\n    if (navigator.clipboard && window.isSecureContext) {\n      await navigator.clipboard.writeText(text);\n      return true;\n    }\n\n    // Fallback method for older browsers\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    textArea.style.left = '-999999px';\n    textArea.style.top = '0';\n    textArea.style.width = '2em';\n    textArea.style.height = '2em';\n    textArea.style.padding = '0';\n    textArea.style.border = 'none';\n    textArea.style.outline = 'none';\n    textArea.style.boxShadow = 'none';\n    textArea.style.background = 'transparent';\n\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n\n    const successful = document.execCommand('copy');\n    document.body.removeChild(textArea);\n\n    return successful;\n  } catch (error) {\n    console.error('Failed to copy text:', error);\n    return false;\n  }\n};\n\n/**\n * Show copy success feedback\n */\nconst showCopySuccess = (button: HTMLElement): void => {\n  const originalText = button.textContent || 'Copy';\n  const originalClasses = button.className;\n\n  button.textContent = 'Copied!';\n  button.classList.add(COPY_SUCCESS_CLASS);\n\n  setTimeout(() => {\n    button.textContent = originalText;\n    button.className = originalClasses;\n  }, COPY_TIMEOUT);\n};\n\n/**\n * Show copy error feedback\n */\nconst showCopyError = (button: HTMLElement): void => {\n  const originalText = button.textContent || 'Copy';\n  const originalClasses = button.className;\n\n  button.textContent = 'Failed!';\n  button.classList.add(COPY_ERROR_CLASS);\n\n  setTimeout(() => {\n    button.textContent = originalText;\n    button.className = originalClasses;\n  }, COPY_TIMEOUT);\n};\n\n/**\n * Handle copy button click\n */\nconst handleCopyClick = async (button: HTMLElement, codeBlock: HTMLElement): Promise<void> => {\n  const code = codeBlock.textContent || '';\n\n  if (!code.trim()) {\n    console.warn('No code to copy');\n    return;\n  }\n\n  // Disable button temporarily to prevent multiple clicks\n  (button as HTMLButtonElement).disabled = true;\n  button.style.opacity = '0.6';\n  button.style.cursor = 'wait';\n\n  try {\n    const success = await copyToClipboard(code);\n\n    if (success) {\n      showCopySuccess(button);\n    } else {\n      showCopyError(button);\n    }\n  } catch (error) {\n    console.error('Copy failed:', error);\n    showCopyError(button);\n  } finally {\n    // Re-enable button\n    (button as HTMLButtonElement).disabled = false;\n    button.style.opacity = '';\n    button.style.cursor = '';\n  }\n};\n\n/**\n * Create copy button for code block\n */\nconst createCopyButton = (): HTMLElement => {\n  const button = create('button', {\n    class: COPY_BUTTON_CLASS,\n    type: 'button',\n    'aria-label': 'Copy code to clipboard',\n    title: 'Copy code',\n    'data-clipboard-text': ''\n  }, 'Copy');\n\n  return button;\n};\n\n/**\n * Setup copy button for a code block\n */\nconst setupCopyButton = (codeBlock: HTMLElement): void => {\n  // Skip if already has copy button\n  const parent = codeBlock.parentElement;\n  if (!parent || parent.classList.contains('has-copy-button')) {\n    return;\n  }\n\n  // Check if it's a code block inside pre\n  const preElement = parent.tagName === 'PRE' ? parent : codeBlock.closest('pre');\n  if (!preElement) {\n    return;\n  }\n\n  // Mark as processed\n  preElement.classList.add('has-copy-button');\n\n  // Create and append button\n  const button = createCopyButton();\n  preElement.style.position = 'relative';\n  preElement.appendChild(button);\n\n  // Add click handler\n  const cleanup = addEventListener(button, 'click', async (e) => {\n    e.preventDefault();\n    await handleCopyClick(button, codeBlock);\n  });\n\n  // Store cleanup function for potential removal later\n  (button as any)._cleanup = cleanup;\n\n  // Add keyboard support (Ctrl+C / Cmd+C when code block is focused)\n  const keyboardHandler = (e: KeyboardEvent): void => {\n    if ((e.ctrlKey || e.metaKey) && e.key === 'c') {\n      // Only handle if code block or its children are focused\n      const activeElement = document.activeElement;\n      if (activeElement === codeBlock || codeBlock.contains(activeElement)) {\n        e.preventDefault();\n        handleCopyClick(button, codeBlock);\n      }\n    }\n  };\n\n  const keydownCleanup = addEventListener(codeBlock, 'keydown', keyboardHandler);\n  (codeBlock as any)._keycleanup = keydownCleanup;\n};\n\n/**\n * Initialize copy functionality for all code blocks\n */\nexport const initCopyCode = (): void => {\n  // Find all code blocks (including those from highlight.js)\n  const codeBlocks = Array.from(qsa('pre code, highlight > code, .highlight > pre > code')) as HTMLElement[];\n\n  if (codeBlocks.length === 0) {\n    console.log('\uD83D\uDCDD No code blocks found for copy functionality');\n    return;\n  }\n\n  codeBlocks.forEach((codeBlock) => {\n    setupCopyButton(codeBlock);\n  });\n\n  console.log(`\uD83D\uDCCB Copy buttons initialized for ${codeBlocks.length} code blocks`);\n};\n\n/**\n * Cleanup copy functionality (for testing or dynamic content)\n */\nexport const cleanupCopyCode = (): void => {\n  const buttons = qsa(`.${COPY_BUTTON_CLASS}`);\n  buttons.forEach(button => {\n    const cleanup = (button as any)._cleanup;\n    if (typeof cleanup === 'function') {\n      cleanup();\n    }\n    button.remove();\n  });\n\n  const codeBlocks = Array.from(qsa('pre code, highlight > code, .highlight > pre > code')) as HTMLElement[];\n  codeBlocks.forEach(codeBlock => {\n    const keycleanup = (codeBlock as any)._keycleanup;\n    if (typeof keycleanup === 'function') {\n      keycleanup();\n    }\n  });\n\n  const preElements = qsa('.has-copy-button');\n  preElements.forEach(pre => {\n    pre.classList.remove('has-copy-button');\n  });\n\n  console.log('\uD83E\uDDF9 Copy code functionality cleaned up');\n};\n\n/**\n * Copy button styles are now loaded from external CSS files\n * This function is kept for backward compatibility but no longer does anything\n */\nexport const addCopyButtonStyles = (): void => {\n  // Styles are now in src/css/components.css and loaded via the build system\n  console.log('\uD83D\uDCCB Copy button styles loaded from external CSS file');\n};", "/**\n * Table of Contents functionality\n *\n * Features:\n * - Auto-generate from h2-h6 headings\n * - Hierarchical structure with indentation\n * - Smooth scroll navigation\n * - Active section highlighting\n * - Responsive design for mobile\n * - Accessibility support\n * - Dynamic updates\n */\n\nimport { qsa, create, scrollToElement, addEventListener, throttle } from './utils/dom';\nimport type { TocItem } from '../interfaces/types';\n\nconst TOC_CONTAINER_SELECTOR = '#toc-container';\nconst TOC_ID_PREFIX = 'toc-';\nconst ACTIVE_CLASS = 'toc-active';\nconst HEADING_SELECTORS = 'h2, h3, h4, h5, h6';\nconst SCROLL_OFFSET = 80; // pixels\nconst THROTTLE_DELAY = 100; // ms\n\n/**\n * Generate hierarchical TOC structure\n */\nconst generateTOC = (headings: Element[]): TocItem[] => {\n  const toc: TocItem[] = [];\n  const stack: TocItem[] = [];\n\n  headings.forEach((heading, index) => {\n    const id = `${TOC_ID_PREFIX}${index}`;\n    heading.id = id;\n\n    const item: TocItem = {\n      id,\n      text: heading.textContent?.trim() || `Heading ${index + 1}`,\n      level: parseInt(heading.tagName.charAt(1)),\n      children: []\n    };\n\n    // Build hierarchy using stack\n    while (stack.length > 0 && (stack[stack.length - 1]?.level ?? 0) >= item.level) {\n      stack.pop();\n    }\n\n    if (stack.length === 0) {\n      toc.push(item);\n    } else {\n      stack[stack.length - 1]?.children.push(item);\n    }\n\n    stack.push(item);\n  });\n\n  return toc;\n};\n\n/**\n * Render TOC in container\n */\nconst renderTOC = (container: Element, toc: TocItem[]): void => {\n  if (toc.length === 0) {\n    container.innerHTML = '<p class=\"toc-empty\">No headings found</p>';\n    return;\n  }\n\n  const tocElement = create('nav', { class: 'toc' });\n  const listElement = create('ol', { class: 'toc-list' });\n\n  // Add TOC title\n  const titleElement = create('h2', { class: 'toc-title' }, 'Table of Contents');\n  tocElement.appendChild(titleElement);\n\n  renderTOCItems(listElement, toc, 0);\n  tocElement.appendChild(listElement);\n\n  container.innerHTML = '';\n  container.appendChild(tocElement);\n};\n\n/**\n * Render TOC items recursively\n */\nconst renderTOCItems = (parentElement: Element, items: TocItem[], depth: number): void => {\n  items.forEach((item) => {\n    const listItem = create('li', { class: 'toc-item' });\n\n    // Create link\n    const link = create('a', {\n      href: `#${item.id}`,\n      class: 'toc-link',\n      'data-level': item.level.toString()\n    }, item.text);\n\n    // Add click handler for smooth scroll\n    addEventListener(link, 'click', (e) => {\n      e.preventDefault();\n      const targetElement = document.getElementById(item.id);\n      if (targetElement) {\n        scrollToElement(targetElement, SCROLL_OFFSET);\n        updateActiveTOC(item.id);\n      }\n    });\n\n    listItem.appendChild(link);\n\n    // Render children if any\n    if (item.children.length > 0) {\n      const childList = create('ol', { class: `toc-list toc-list-${depth + 1}` });\n      renderTOCItems(childList, item.children, depth + 1);\n      listItem.appendChild(childList);\n    }\n\n    parentElement.appendChild(listItem);\n  });\n};\n\n/**\n * Update active TOC item\n */\nconst updateActiveTOC = (activeId: string): void => {\n  // Remove active class from all items\n  const activeElements = document.querySelectorAll(`.${ACTIVE_CLASS}`);\n  activeElements.forEach(el => el.classList.remove(ACTIVE_CLASS));\n\n  // Add active class to current item\n  const activeLink = document.querySelector(`a[href=\"#${activeId}\"]`);\n  if (activeLink) {\n    activeLink.classList.add(ACTIVE_CLASS);\n  }\n\n  // Update parent active states\n  let currentLink: Element | null | undefined = activeLink;\n  while (currentLink) {\n    const parentItem = currentLink.closest('.toc-item') as Element;\n    if (parentItem) {\n      const parentLink = parentItem.querySelector('.toc-link');\n      if (parentLink) {\n        parentLink.classList.add(ACTIVE_CLASS);\n      }\n    }\n    currentLink = parentItem?.parentElement?.closest('.toc-item');\n  }\n};\n\n/**\n * Check if element is in viewport with offset\n */\nconst isElementInViewport = (element: Element, offset: number = 0): boolean => {\n  const rect = element.getBoundingClientRect();\n  const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n\n  return (\n    rect.top <= windowHeight &&\n    rect.bottom >= 0 &&\n    rect.left >= 0 &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n    rect.top <= offset\n  );\n};\n\n/**\n * Get the current active heading\n */\nconst getCurrentActiveHeading = (): string | null => {\n  const headings = qsa(HEADING_SELECTORS);\n\n  for (let i = headings.length - 1; i >= 0; i--) {\n    const heading = headings[i];\n    if (heading && isElementInViewport(heading, SCROLL_OFFSET)) {\n      return heading.id;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup scroll spy functionality\n */\nconst setupScrollSpy = (): void => {\n  const scrollHandler = throttle(() => {\n    const activeId = getCurrentActiveHeading();\n    if (activeId) {\n      updateActiveTOC(activeId);\n    }\n  }, THROTTLE_DELAY);\n\n  const cleanup = addEventListener(window as any, 'scroll', scrollHandler);\n  (window as any)._scrollSpyCleanup = cleanup;\n\n  // Initial check\n  setTimeout(() => {\n    const activeId = getCurrentActiveHeading();\n    if (activeId) {\n      updateActiveTOC(activeId);\n    }\n  }, 100);\n\n  console.log('\uD83D\uDCD1 Scroll spy functionality setup');\n};\n\n/**\n * Observe content changes and update TOC\n */\nconst setupContentObserver = (): void => {\n  const targetNode = document.querySelector('.post-content, .page-content');\n  if (!targetNode) return;\n\n  const observer = new MutationObserver(() => {\n    // Debounce rapid changes\n    setTimeout(() => {\n      const headings = Array.from(qsa(HEADING_SELECTORS));\n      if (headings.length === 0) return;\n\n      const toc = generateTOC(headings);\n      const container = document.querySelector(TOC_CONTAINER_SELECTOR);\n      if (container) {\n        renderTOC(container, toc);\n        setupScrollSpy();\n      }\n    }, 100);\n  });\n\n  observer.observe(targetNode, {\n    childList: true,\n    subtree: true\n  });\n\n  console.log('\uD83D\uDCD1 Content observer setup');\n};\n\n/**\n * Find TOC container or create one\n */\nconst getOrCreateTOCContainer = (): Element | null => {\n  // Try to find existing container\n  let container = document.querySelector(TOC_CONTAINER_SELECTOR);\n  if (container) return container;\n\n  // Find suitable location to insert TOC\n  const postContent = document.querySelector('.post-content');\n  const pageContent = document.querySelector('.page-content');\n\n  const targetContent = postContent || pageContent;\n  if (!targetContent) {\n    console.warn('\u26A0\uFE0F Could not find suitable location for TOC');\n    return null;\n  }\n\n  // Create container\n  container = create('div', {\n    id: TOC_CONTAINER_SELECTOR.replace('#', ''),\n    class: 'toc-container'\n  });\n\n  // Insert after first paragraph or at the beginning\n  const firstParagraph = targetContent.querySelector('p');\n  if (firstParagraph) {\n    firstParagraph.parentNode?.insertBefore(container, firstParagraph.nextSibling);\n  } else {\n    targetContent.insertBefore(container, targetContent.firstChild);\n  }\n\n  return container;\n};\n\n/**\n * Initialize TOC functionality\n */\nexport const initTOC = (): void => {\n  console.log('\uD83D\uDCD1 Initializing Table of Contents...');\n\n  // Get or create TOC container\n  const container = getOrCreateTOCContainer();\n  if (!container) {\n    console.log('\uD83D\uDCD1 No suitable location found for TOC');\n    return;\n  }\n\n  // Find headings in the page\n  const headings = Array.from(qsa(HEADING_SELECTORS));\n  if (headings.length === 0) {\n    console.log('\uD83D\uDCD1 No headings found - TOC not created');\n    container.innerHTML = '<p class=\"toc-empty\">No headings found on this page</p>';\n    return;\n  }\n\n  // Generate and render TOC\n  const toc = generateTOC(headings);\n  renderTOC(container, toc);\n\n  // Setup scroll spy\n  setupScrollSpy();\n\n  // Setup content observer for dynamic changes\n  setupContentObserver();\n\n  console.log(`\uD83D\uDCD1 Table of Contents initialized with ${headings.length} headings`);\n};\n\n/**\n * Cleanup TOC functionality\n */\nexport const cleanupTOC = (): void => {\n  // Remove event listeners\n  const scrollCleanup = (window as any)._scrollSpyCleanup;\n  if (typeof scrollCleanup === 'function') {\n    scrollCleanup();\n  }\n\n  // Clear TOC container\n  const container = document.querySelector(TOC_CONTAINER_SELECTOR);\n  if (container) {\n    container.innerHTML = '';\n  }\n\n  console.log('\uD83D\uDCD1 Table of Contents cleaned up');\n};\n\n/**\n * TOC styles are now loaded from external CSS files\n * This function is kept for backward compatibility but no longer does anything\n */\nexport const addTOCStyles = (): void => {\n  // Styles are now in src/css/components.css and loaded via the build system\n  console.log('\uD83D\uDCD1 TOC styles loaded from external CSS file');\n};", "/**\n * Service Factory Pattern\n *\n * Provides a dependency injection system for creating and managing services.\n * This makes the application more testable and decouples components from concrete service implementations.\n *\n * @example\n * ```typescript\n * // Register a service\n * serviceFactory.register('config', createConfigService);\n *\n * // Get a service\n * const configService = serviceFactory.get('config');\n *\n * // Create a scoped factory for testing\n * const testFactory = serviceFactory.createScope();\n * testFactory.register('config', createMockConfigService);\n * ```\n */\n\nimport type { Disposable } from './cleanup-manager';\n\n// ============================================================================\n// Service Factory Types\n// ============================================================================\n\n/**\n * Service factory function type\n */\nexport type ServiceFactory<T = any> = (...args: any[]) => T;\n\n/**\n * Service registration metadata\n */\nexport interface ServiceRegistration<T = any> {\n  factory: ServiceFactory<T>;\n  instance?: T;\n  singleton: boolean;\n  dependencies?: string[];\n  created?: number;\n}\n\n/**\n * Service factory configuration\n */\nexport interface ServiceFactoryConfig {\n  /** Enable debug logging */\n  debug?: boolean;\n  /** Auto-dispose services on scope destruction */\n  autoDispose?: boolean;\n}\n\n// ============================================================================\n// Service Factory Implementation\n// ============================================================================\n\n/**\n * Service Factory for dependency injection\n */\nexport class ServiceFactoryScope {\n  private services = new Map<string, ServiceRegistration>();\n  private debug: boolean;\n  private autoDispose: boolean;\n  private parent: ServiceFactoryScope | null;\n  private children = new Set<ServiceFactoryScope>();\n\n  constructor(config: ServiceFactoryConfig = {}, parent?: ServiceFactoryScope) {\n    this.debug = config.debug ?? false;\n    this.autoDispose = config.autoDispose ?? true;\n    this.parent = parent || null;\n\n    if (parent) {\n      parent.children.add(this);\n    }\n  }\n\n  /**\n   * Register a service factory\n   */\n  register<T>(name: string, factory: ServiceFactory<T>, singleton: boolean = true): void {\n    if (this.services.has(name)) {\n      this.unregister(name);\n    }\n\n    this.services.set(name, {\n      factory,\n      singleton,\n      created: Date.now()\n    });\n\n    if (this.debug) {\n      console.log(`\uD83C\uDFED Service registered: ${name} (${singleton ? 'singleton' : 'transient'})`);\n    }\n  }\n\n  /**\n   * Register a service instance\n   */\n  registerInstance<T>(name: string, instance: T): void {\n    if (this.services.has(name)) {\n      this.unregister(name);\n    }\n\n    this.services.set(name, {\n      factory: () => instance,\n      singleton: true,\n      instance,\n      created: Date.now()\n    });\n\n    if (this.debug) {\n      console.log(`\uD83C\uDFED Service instance registered: ${name}`);\n    }\n  }\n\n  /**\n   * Get a service instance\n   */\n  get<T = any>(name: string): T {\n    const registration = this.services.get(name);\n\n    if (!registration) {\n      // Try to get from parent scope\n      if (this.parent) {\n        return this.parent.get<T>(name);\n      }\n\n      throw new Error(`Service not found: ${name}`);\n    }\n\n    // Return existing instance for singletons\n    if (registration.singleton && registration.instance) {\n      return registration.instance;\n    }\n\n    // Create new instance\n    const instance = registration.factory();\n\n    // Store instance for singletons\n    if (registration.singleton) {\n      registration.instance = instance;\n    }\n\n    // Auto-register disposable instances for cleanup\n    if (this.autoDispose && this.isDisposable(instance)) {\n      this.registerDisposable(instance);\n    }\n\n    if (this.debug) {\n      const type = registration.singleton ? 'singleton' : 'transient';\n      console.log(`\uD83C\uDFED Service created: ${name} (${type})`);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  has(name: string): boolean {\n    return this.services.has(name) || (this.parent?.has(name) ?? false);\n  }\n\n  /**\n   * Unregister a service\n   */\n  unregister(name: string): boolean {\n    const registration = this.services.get(name);\n\n    if (!registration) {\n      return false;\n    }\n\n    // Dispose of instance if it's disposable\n    if (registration.instance && this.isDisposable(registration.instance)) {\n      try {\n        registration.instance.dispose();\n      } catch (error) {\n        console.error(`Error disposing service ${name}:`, error);\n      }\n    }\n\n    this.services.delete(name);\n\n    if (this.debug) {\n      console.log(`\uD83C\uDFED Service unregistered: ${name}`);\n    }\n\n    return true;\n  }\n\n  /**\n   * Create a child scope\n   */\n  createScope(config: ServiceFactoryConfig = {}): ServiceFactoryScope {\n    return new ServiceFactoryScope(config, this);\n  }\n\n  /**\n   * Get service statistics\n   */\n  getStats(): {\n    scope: 'root' | 'child';\n    services: number;\n    singletons: number;\n    transient: number;\n    children: number;\n    servicesList: Array<{\n      name: string;\n      type: 'singleton' | 'transient';\n      hasInstance: boolean;\n      created: number;\n    }>;\n  } {\n    const servicesList = Array.from(this.services.entries()).map(([name, registration]) => ({\n      name,\n      type: registration.singleton ? 'singleton' as const : 'transient' as const,\n      hasInstance: !!registration.instance,\n      created: registration.created!\n    }));\n\n    return {\n      scope: this.parent ? 'child' : 'root',\n      services: this.services.size,\n      singletons: servicesList.filter(s => s.type === 'singleton').length,\n      transient: servicesList.filter(s => s.type === 'transient').length,\n      children: this.children.size,\n      servicesList\n    };\n  }\n\n  /**\n   * Clear all services\n   */\n  clear(): void {\n    // Dispose of all disposable instances\n    for (const [name, registration] of this.services) {\n      if (registration.instance && this.isDisposable(registration.instance)) {\n        try {\n          registration.instance.dispose();\n        } catch (error) {\n          console.error(`Error disposing service ${name}:`, error);\n        }\n      }\n    }\n\n    this.services.clear();\n\n    if (this.debug) {\n      console.log('\uD83C\uDFED All services cleared');\n    }\n  }\n\n  /**\n   * Destroy scope and cleanup\n   */\n  destroy(): void {\n    // Remove from parent\n    if (this.parent) {\n      this.parent.children.delete(this);\n    }\n\n    // Destroy all child scopes\n    for (const child of this.children) {\n      child.destroy();\n    }\n\n    // Clear all services\n    this.clear();\n\n    if (this.debug) {\n      console.log('\uD83C\uDFED Service factory scope destroyed');\n    }\n  }\n\n  /**\n   * Check if object is disposable\n   */\n  private isDisposable(obj: any): obj is Disposable {\n    return obj && typeof obj === 'object' && typeof obj.dispose === 'function';\n  }\n\n  /**\n   * Register disposable for automatic cleanup\n   */\n  private registerDisposable(_instance: Disposable): void {\n    // In a real implementation, this would integrate with the cleanup manager\n    // For now, we just track it for scope cleanup\n    if (this.debug) {\n      console.log('\uD83C\uDFED Disposable service tracked for cleanup');\n    }\n  }\n}\n\n// ============================================================================\n// Default Service Factory\n// ============================================================================\n\n/**\n * Default service factory instance\n */\nexport const serviceFactory = new ServiceFactoryScope({\n  debug: process.env.NODE_ENV === 'development',\n  autoDispose: true\n});\n\n// ============================================================================\n// Convenience Functions\n// ============================================================================\n\n/**\n * Register a service\n */\nexport const registerService = <T>(\n  name: string,\n  factory: ServiceFactory<T>,\n  singleton: boolean = true\n): void => {\n  serviceFactory.register(name, factory, singleton);\n};\n\n/**\n * Register a service instance\n */\nexport const registerServiceInstance = <T>(name: string, instance: T): void => {\n  serviceFactory.registerInstance(name, instance);\n};\n\n/**\n * Get a service\n */\nexport const getService = <T = any>(name: string): T => {\n  return serviceFactory.get<T>(name);\n};\n\n/**\n * Check if a service exists\n */\nexport const hasService = (name: string): boolean => {\n  return serviceFactory.has(name);\n};\n\n/**\n * Unregister a service\n */\nexport const unregisterService = (name: string): boolean => {\n  return serviceFactory.unregister(name);\n};\n\n/**\n * Create a test scope with mock services\n */\nexport const createTestScope = (): ServiceFactoryScope => {\n  return serviceFactory.createScope({\n    debug: true,\n    autoDispose: true\n  });\n};\n\n// ============================================================================\n// Service Builder Pattern\n// ============================================================================\n\n/**\n * Service builder for creating complex services\n */\nexport class ServiceBuilder<T = any> {\n  private dependencies: string[] = [];\n  private factoryFn: ServiceFactory<T> | undefined;\n  private singleton: boolean = true;\n\n  constructor(private name: string) {}\n\n  /**\n   * Add a dependency\n   */\n  dependsOn(...deps: string[]): this {\n    this.dependencies.push(...deps);\n    return this;\n  }\n\n  /**\n   * Set as singleton\n   */\n  asSingleton(singleton: boolean = true): this {\n    this.singleton = singleton;\n    return this;\n  }\n\n  /**\n   * Set the factory function\n   */\n  setFactory(factory: ServiceFactory<T>): this {\n    this.factoryFn = factory;\n    return this;\n  }\n\n  /**\n   * Build and register the service\n   */\n  build(): void {\n    if (!this.factoryFn) {\n      throw new Error(`Factory function not set for service: ${this.name}`);\n    }\n\n    serviceFactory.register(this.name, this.factoryFn, this.singleton);\n\n    if (this.debug) {\n      console.log(`\uD83C\uDFED Service built: ${this.name} with dependencies: [${this.dependencies.join(', ')}]`);\n    }\n  }\n\n  /**\n   * Build and register the service with dependencies\n   */\n  buildWithDependencies(): void {\n    const originalFactory = this.factoryFn;\n    if (!originalFactory) {\n      throw new Error(`Factory function not set for service: ${this.name}`);\n    }\n\n    this.factoryFn = (_args: any[]) => {\n      const deps = this.dependencies.map(dep => serviceFactory.get(dep));\n      return originalFactory(...deps);\n    };\n\n    this.build();\n  }\n\n  private get debug(): boolean {\n    return serviceFactory.getStats().scope === 'root'; // Simple debug detection\n  }\n}\n\n/**\n * Create a service builder\n */\nexport const createService = <T>(name: string): ServiceBuilder<T> => {\n  return new ServiceBuilder<T>(name);\n};", "/**\n * Plugin System Architecture\n *\n * Provides a flexible plugin system that allows dynamic loading and management\n * of modular functionality. Features include:\n * - Plugin lifecycle management\n * - Dependency resolution\n * - Configuration management\n * - Event-driven communication\n * - Security sandboxing\n * - Hot-reloading capabilities\n */\n\n// Define plugin types locally to avoid circular imports\nexport interface Plugin {\n  metadata?: PluginMetadata;\n  init?(context: PluginContext): Promise<void> | void;\n  destroy?(): Promise<void> | void;\n}\n\nexport interface PluginContext {\n  config: any; // SiteConfig\n  utils: PluginUtils;\n  events: PluginEventEmitter;\n  storage: PluginStorage;\n  on(event: string, handler: Function): void;\n  off(event: string, handler: Function): void;\n  emit(event: string, data?: any): void;\n  get<T = any>(key: string): T | undefined;\n  set<T = any>(key: string, value: T): void;\n  remove(key: string): void;\n  clear(): void;\n}\n\nexport interface PluginEventEmitter {\n  on(event: string, handler: Function): void;\n  off(event: string, handler: Function): void;\n  emit(event: string, data?: any): void;\n  removeAllListeners(event?: string): void;\n  listenerCount(event: string): number;\n}\n\nexport interface PluginStorage {\n  get<T = any>(key: string): T | undefined;\n  set<T = any>(key: string, value: T): void;\n  remove(key: string): void;\n  clear(): void;\n  has(key: string): boolean;\n  keys(): string[];\n  values(): any[];\n  entries(): Array<[string, any]>;\n}\n\nexport interface PluginUtils {\n  dom: any;\n  storage: any;\n  events: any;\n}\n\n// ============================================================================\n// Plugin System Types\n// ============================================================================\n\n/**\n * Plugin loading strategy\n */\nexport type PluginLoadingStrategy = 'eager' | 'lazy' | 'manual';\n\n/**\n * Plugin state\n */\nexport type PluginState = 'unloaded' | 'loading' | 'loaded' | 'initializing' | 'active' | 'deinitializing' | 'error' | 'disabled';\n\n/**\n * Plugin metadata\n */\nexport interface PluginMetadata {\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  license?: string;\n  homepage?: string;\n  keywords?: string[];\n  repository?: string;\n  bugs?: string;\n  dependencies?: string[];\n  peerDependencies?: string[];\n  engines?: {\n    node?: string;\n    npm?: string;\n  };\n  jekyll?: {\n    version?: string;\n    compatibility?: string[];\n  };\n}\n\n/**\n * Plugin registration information\n */\nexport interface PluginRegistration {\n  metadata: PluginMetadata;\n  plugin: Plugin;\n  instance?: any;\n  state: PluginState;\n  config: Record<string, any>;\n  loadTime?: number;\n  error?: Error;\n  registeredAt: Date;\n  lastActive?: Date;\n}\n\n/**\n * Plugin system configuration\n */\nexport interface PluginSystemConfig {\n  /** Default loading strategy */\n  defaultLoadingStrategy?: PluginLoadingStrategy;\n  /** Enable hot-reloading in development */\n  hotReload?: boolean;\n  /** Enable plugin sandboxing */\n  sandboxing?: boolean;\n  /** Plugin timeout in milliseconds */\n  pluginTimeout?: number;\n  /** Enable debug logging */\n  debug?: boolean;\n  /** Maximum number of plugins */\n  maxPlugins?: number;\n  /** Allowed plugin sources */\n  allowedSources?: string[];\n}\n\n/**\n * Plugin load options\n */\nexport interface PluginLoadOptions {\n  strategy?: PluginLoadingStrategy;\n  config?: Record<string, any>;\n  timeout?: number;\n  dependencies?: Record<string, any>;\n}\n\n// ============================================================================\n// Plugin Context Implementation\n// ============================================================================\n\n/**\n * Plugin context implementation\n */\nclass PluginContextImpl implements PluginContext {\n  private eventListeners = new Map<string, Set<Function>>();\n  private internalStorage: Map<string, any> = new Map();\n\n  constructor(\n    public config: any, // SiteConfig - using any to avoid circular import\n    public utils: PluginUtils,\n    public events: PluginEventEmitter,\n    public storageImpl: PluginStorage\n  ) {}\n\n  // Make storage public to match interface\n  public get storage(): PluginStorage {\n    return this.storageImpl;\n  }\n\n  // Event handling\n  on(event: string, handler: Function): void {\n    this.events.on(event, handler);\n    this.trackListener(event, handler);\n  }\n\n  off(event: string, handler: Function): void {\n    this.events.off(event, handler);\n    this.untrackListener(event, handler);\n  }\n\n  emit(event: string, data?: any): void {\n    this.events.emit(event, data);\n  }\n\n  // Storage operations\n  get<T = any>(key: string): T | undefined {\n    return this.internalStorage.get(key) ?? this.storageImpl.get(key);\n  }\n\n  set<T = any>(key: string, value: T): void {\n    this.internalStorage.set(key, value);\n    this.storageImpl.set(key, value);\n  }\n\n  remove(key: string): void {\n    this.internalStorage.delete(key);\n    this.storageImpl.remove(key);\n  }\n\n  clear(): void {\n    this.internalStorage.clear();\n    this.storageImpl.clear();\n  }\n\n  // Internal listener tracking\n  private trackListener(event: string, handler: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set());\n    }\n    this.eventListeners.get(event)!.add(handler);\n  }\n\n  private untrackListener(event: string, handler: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.delete(handler);\n      if (listeners.size === 0) {\n        this.eventListeners.delete(event);\n      }\n    }\n  }\n\n  /**\n   * Cleanup all listeners and storage\n   */\n  cleanup(): void {\n    // Remove all tracked listeners\n    for (const [event, listeners] of this.eventListeners) {\n      for (const listener of listeners) {\n        this.events.off(event, listener);\n      }\n    }\n    this.eventListeners.clear();\n\n    // Clear storage\n    this.clear();\n  }\n}\n\n// ============================================================================\n// Plugin Storage Implementation\n// ============================================================================\n\n/**\n * Plugin storage implementation\n */\nclass PluginStorageImpl implements PluginStorage {\n  private data = new Map<string, any>();\n\n  get<T = any>(key: string): T | undefined {\n    return this.data.get(key);\n  }\n\n  set<T = any>(key: string, value: T): void {\n    this.data.set(key, value);\n  }\n\n  remove(key: string): void {\n    this.data.delete(key);\n  }\n\n  clear(): void {\n    this.data.clear();\n  }\n\n  has(key: string): boolean {\n    return this.data.has(key);\n  }\n\n  keys(): string[] {\n    return Array.from(this.data.keys());\n  }\n\n  values(): any[] {\n    return Array.from(this.data.values());\n  }\n\n  entries(): Array<[string, any]> {\n    return Array.from(this.data.entries());\n  }\n}\n\n// ============================================================================\n// Plugin Event Emitter\n// ============================================================================\n\n/**\n * Plugin event emitter implementation\n */\nclass PluginEventEmitterImpl implements PluginEventEmitter {\n  private listeners = new Map<string, Set<Function>>();\n  private maxListeners: number = 10;\n\n  on(event: string, handler: Function): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n\n    const eventListeners = this.listeners.get(event)!;\n    if (eventListeners.size >= this.maxListeners) {\n      console.warn(`PluginEventEmitter: Maximum listeners (${this.maxListeners}) exceeded for event \"${event}\"`);\n    }\n\n    eventListeners.add(handler);\n  }\n\n  off(event: string, handler: Function): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.delete(handler);\n      if (eventListeners.size === 0) {\n        this.listeners.delete(event);\n      }\n    }\n  }\n\n  emit(event: string, data?: any): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      for (const listener of eventListeners) {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error(`PluginEventEmitter: Error in event listener for \"${event}\":`, error);\n        }\n      }\n    }\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n\n  listenerCount(event: string): number {\n    return this.listeners.get(event)?.size || 0;\n  }\n}\n\n// ============================================================================\n// Plugin Utilities\n// ============================================================================\n\n/**\n * Plugin utilities implementation\n */\nexport const pluginUtils: PluginUtils = {\n  // Import utilities from existing modules\n  dom: null as any, // Will be populated dynamically\n  storage: null as any, // Will be populated dynamically\n  events: null as any, // Will be populated dynamically\n};\n\n// ============================================================================\n// Plugin System Implementation\n// ============================================================================\n\n/**\n * Main plugin system\n */\nexport class PluginSystem {\n  private config: PluginSystemConfig;\n  private plugins = new Map<string, PluginRegistration>();\n  private eventEmitter: PluginEventEmitterImpl;\n  private pluginStorage: PluginStorageImpl;\n  private loadingPlugins = new Set<string>();\n  private debug: boolean;\n\n  constructor(config: PluginSystemConfig = {}) {\n    this.config = {\n      defaultLoadingStrategy: 'lazy',\n      hotReload: process.env.NODE_ENV === 'development',\n      sandboxing: false,\n      pluginTimeout: 30000, // 30 seconds\n      debug: process.env.NODE_ENV === 'development',\n      maxPlugins: 50,\n      allowedSources: [],\n      ...config\n    };\n\n    this.debug = this.config.debug!;\n    this.eventEmitter = new PluginEventEmitterImpl();\n    this.pluginStorage = new PluginStorageImpl();\n\n    if (this.debug) {\n      console.log('\uD83D\uDD0C Plugin system initialized with config:', this.config);\n    }\n  }\n\n  /**\n   * Register a plugin\n   */\n  async register(plugin: Plugin, options: PluginLoadOptions = {}): Promise<void> {\n    const metadata = await this.extractMetadata(plugin);\n    const pluginName = metadata.name;\n\n    if (this.plugins.has(pluginName)) {\n      throw new Error(`Plugin \"${pluginName}\" is already registered`);\n    }\n\n    if (this.plugins.size >= this.config.maxPlugins!) {\n      throw new Error(`Maximum number of plugins (${this.config.maxPlugins}) reached`);\n    }\n\n    if (this.debug) {\n      console.log(`\uD83D\uDD0C Registering plugin: ${pluginName} v${metadata.version}`);\n    }\n\n    const registration: PluginRegistration = {\n      metadata,\n      plugin,\n      state: 'loaded',\n      config: options.config || {},\n      registeredAt: new Date()\n    };\n\n    this.plugins.set(pluginName, registration);\n    this.eventEmitter.emit('plugin-registered', { name: pluginName, metadata });\n\n    // Load plugin if strategy is eager\n    if (options.strategy === 'eager' || (!options.strategy && this.config.defaultLoadingStrategy === 'eager')) {\n      await this.load(pluginName, options);\n    }\n  }\n\n  /**\n   * Load a plugin\n   */\n  async load(name: string, _options: PluginLoadOptions = {}): Promise<void> {\n    const registration = this.plugins.get(name);\n    if (!registration) {\n      throw new Error(`Plugin \"${name}\" is not registered`);\n    }\n\n    if (registration.state === 'active') {\n      if (this.debug) {\n        console.log(`\uD83D\uDD0C Plugin \"${name}\" is already active`);\n      }\n      return;\n    }\n\n    if (registration.state === 'loading' || this.loadingPlugins.has(name)) {\n      throw new Error(`Plugin \"${name}\" is already loading`);\n    }\n\n    this.loadingPlugins.add(name);\n    registration.state = 'loading';\n\n    try {\n      const startTime = Date.now();\n\n      // Check dependencies\n      if (registration.metadata.dependencies) {\n        await this.checkDependencies(registration.metadata.dependencies);\n      }\n\n      // Create plugin context\n      const context = this.createContext(registration);\n\n      // Initialize plugin\n      registration.state = 'initializing';\n      await this.initializePlugin(registration.plugin, context);\n\n      // Store instance\n      registration.instance = context;\n      registration.state = 'active';\n      registration.loadTime = Date.now() - startTime;\n      registration.lastActive = new Date();\n\n      if (this.debug) {\n        console.log(`\uD83D\uDD0C Plugin \"${name}\" loaded successfully in ${registration.loadTime}ms`);\n      }\n\n      this.eventEmitter.emit('plugin-loaded', { name, registration });\n\n    } catch (error) {\n      registration.state = 'error';\n      registration.error = error instanceof Error ? error : new Error(String(error));\n\n      console.error(`\uD83D\uDD0C Failed to load plugin \"${name}\":`, error);\n      this.eventEmitter.emit('plugin-error', { name, error });\n\n      throw error;\n    } finally {\n      this.loadingPlugins.delete(name);\n    }\n  }\n\n  /**\n   * Unload a plugin\n   */\n  async unload(name: string): Promise<void> {\n    const registration = this.plugins.get(name);\n    if (!registration) {\n      throw new Error(`Plugin \"${name}\" is not registered`);\n    }\n\n    if (registration.state !== 'active') {\n      if (this.debug) {\n        console.log(`\uD83D\uDD0C Plugin \"${name}\" is not active`);\n      }\n      return;\n    }\n\n    if (this.debug) {\n      console.log(`\uD83D\uDD0C Unloading plugin: ${name}`);\n    }\n\n    registration.state = 'deinitializing';\n\n    try {\n      // Call destroy if available\n      if (registration.plugin.destroy && typeof registration.plugin.destroy === 'function') {\n        await registration.plugin.destroy();\n      }\n\n      // Cleanup context\n      if (registration.instance && typeof registration.instance.cleanup === 'function') {\n        registration.instance.cleanup();\n      }\n\n      registration.state = 'loaded';\n      registration.instance = undefined;\n\n      if (this.debug) {\n        console.log(`\uD83D\uDD0C Plugin \"${name}\" unloaded successfully`);\n      }\n\n      this.eventEmitter.emit('plugin-unloaded', { name, registration });\n\n    } catch (error) {\n      registration.state = 'error';\n      registration.error = error instanceof Error ? error : new Error(String(error));\n\n      console.error(`\uD83D\uDD0C Failed to unload plugin \"${name}\":`, error);\n      this.eventEmitter.emit('plugin-error', { name, error });\n    }\n  }\n\n  /**\n   * Enable a plugin\n   */\n  async enable(name: string): Promise<void> {\n    const registration = this.plugins.get(name);\n    if (!registration) {\n      throw new Error(`Plugin \"${name}\" is not registered`);\n    }\n\n    if (registration.state === 'disabled') {\n      registration.state = 'loaded';\n      await this.load(name);\n    }\n  }\n\n  /**\n   * Disable a plugin\n   */\n  async disable(name: string): Promise<void> {\n    const registration = this.plugins.get(name);\n    if (!registration) {\n      throw new Error(`Plugin \"${name}\" is not registered`);\n    }\n\n    if (registration.state === 'active') {\n      await this.unload(name);\n      registration.state = 'disabled';\n    }\n  }\n\n  /**\n   * Get plugin registration\n   */\n  getPlugin(name: string): PluginRegistration | undefined {\n    return this.plugins.get(name);\n  }\n\n  /**\n   * Get all plugins\n   */\n  getAllPlugins(): PluginRegistration[] {\n    return Array.from(this.plugins.values());\n  }\n\n  /**\n   * Get active plugins\n   */\n  getActivePlugins(): PluginRegistration[] {\n    return Array.from(this.plugins.values()).filter(p => p.state === 'active');\n  }\n\n  /**\n   * Get plugin by state\n   */\n  getPluginsByState(state: PluginState): PluginRegistration[] {\n    return Array.from(this.plugins.values()).filter(p => p.state === state);\n  }\n\n  /**\n   * Check if plugin exists\n   */\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  /**\n   * Unregister a plugin\n   */\n  async unregister(name: string): Promise<void> {\n    const registration = this.plugins.get(name);\n    if (!registration) {\n      return;\n    }\n\n    // Unload if active\n    if (registration.state === 'active') {\n      await this.unload(name);\n    }\n\n    this.plugins.delete(name);\n    this.eventEmitter.emit('plugin-unregistered', { name });\n\n    if (this.debug) {\n      console.log(`\uD83D\uDD0C Plugin \"${name}\" unregistered`);\n    }\n  }\n\n  /**\n   * Get system statistics\n   */\n  getStats(): {\n    total: number;\n    active: number;\n    loaded: number;\n    error: number;\n    disabled: number;\n    loading: number;\n    plugins: Array<{\n      name: string;\n      version: string;\n      state: PluginState;\n      loadTime?: number;\n      registeredAt: Date;\n    }>;\n  } {\n    const plugins = Array.from(this.plugins.values());\n\n    return {\n      total: plugins.length,\n      active: plugins.filter(p => p.state === 'active').length,\n      loaded: plugins.filter(p => p.state === 'loaded').length,\n      error: plugins.filter(p => p.state === 'error').length,\n      disabled: plugins.filter(p => p.state === 'disabled').length,\n      loading: this.loadingPlugins.size,\n      plugins: plugins.map(p => ({\n        name: p.metadata.name,\n        version: p.metadata.version,\n        state: p.state,\n        ...(p.loadTime !== undefined && { loadTime: p.loadTime }),\n        registeredAt: p.registeredAt\n      }))\n    };\n  }\n\n  /**\n   * Get system events\n   */\n  get events(): PluginEventEmitterImpl {\n    return this.eventEmitter;\n  }\n\n  /**\n   * Shutdown plugin system\n   */\n  async shutdown(): Promise<void> {\n    if (this.debug) {\n      console.log('\uD83D\uDD0C Shutting down plugin system...');\n    }\n\n    // Unload all active plugins\n    const activePlugins = this.getActivePlugins();\n    for (const plugin of activePlugins) {\n      try {\n        await this.unload(plugin.metadata.name);\n      } catch (error) {\n        console.error(`Error unloading plugin \"${plugin.metadata.name}\" during shutdown:`, error);\n      }\n    }\n\n    // Clear all plugins\n    this.plugins.clear();\n    this.loadingPlugins.clear();\n\n    // Clear event listeners\n    this.eventEmitter.removeAllListeners();\n\n    if (this.debug) {\n      console.log('\uD83D\uDD0C Plugin system shutdown complete');\n    }\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  /**\n   * Extract metadata from plugin\n   */\n  private async extractMetadata(plugin: Plugin): Promise<PluginMetadata> {\n    // Try to get metadata from plugin properties\n    if (plugin.metadata) {\n      return plugin.metadata;\n    }\n\n    // Try to get from constructor\n    const constructor = plugin.constructor;\n    if (constructor.name && constructor.name !== 'Object') {\n      return {\n        name: constructor.name,\n        version: '1.0.0',\n        description: `${constructor.name} plugin`,\n        author: 'Unknown'\n      };\n    }\n\n    // Default metadata\n    return {\n      name: 'unknown',\n      version: '1.0.0',\n      description: 'Unknown plugin',\n      author: 'Unknown'\n    };\n  }\n\n  /**\n   * Check plugin dependencies\n   */\n  private async checkDependencies(dependencies: string[]): Promise<void> {\n    for (const dep of dependencies) {\n      if (!this.plugins.has(dep)) {\n        throw new Error(`Dependency \"${dep}\" is not available`);\n      }\n\n      const depPlugin = this.plugins.get(dep)!;\n      if (depPlugin.state !== 'active') {\n        throw new Error(`Dependency \"${dep}\" is not active (state: ${depPlugin.state})`);\n      }\n    }\n  }\n\n  /**\n   * Create plugin context\n   */\n  private createContext(registration: PluginRegistration): PluginContext {\n    const config = this.createPluginConfig(registration);\n\n    return new PluginContextImpl(\n      config,\n      pluginUtils,\n      this.eventEmitter,\n      this.pluginStorage\n    );\n  }\n\n  /**\n   * Create plugin configuration\n   */\n  private createPluginConfig(_registration: PluginRegistration): any { // SiteConfig\n    // In a real implementation, this would provide access to the actual site config\n    // For now, return a basic config\n    return {\n      theme: 'system' as any,\n      environment: 'development' as any,\n      isPost: false,\n      isHomePage: false,\n      language: 'en',\n      baseUrl: window.location.origin,\n      features: {\n        searchEnabled: false,\n        tocEnabled: false,\n        copyCodeEnabled: false,\n        shareButtonsEnabled: false,\n        analyticsEnabled: false,\n        commentsEnabled: false\n      },\n      navigation: {\n        items: [],\n        mobile: false,\n        search: false\n      },\n      social: {},\n      performance: {\n        bundleSize: 0,\n        buildTime: 0\n      },\n      seo: {\n        titleTemplate: '',\n        description: '',\n        image: '',\n        keywords: []\n      }\n    };\n  }\n\n  /**\n   * Initialize plugin\n   */\n  private async initializePlugin(plugin: Plugin, context: PluginContext): Promise<void> {\n    if (plugin.init && typeof plugin.init === 'function') {\n      await plugin.init(context);\n    }\n  }\n}\n\n// ============================================================================\n// Default Plugin System Instance\n// ============================================================================\n\n/**\n * Default plugin system instance\n */\nexport const pluginSystem = new PluginSystem({\n  defaultLoadingStrategy: 'lazy',\n  hotReload: process.env.NODE_ENV === 'development',\n  debug: process.env.NODE_ENV === 'development'\n});\n\n// ============================================================================\n// Convenience Functions\n// ============================================================================\n\n/**\n * Register a plugin\n */\nexport const registerPlugin = async (plugin: Plugin, options?: PluginLoadOptions): Promise<void> => {\n  return pluginSystem.register(plugin, options);\n};\n\n/**\n * Load a plugin\n */\nexport const loadPlugin = async (name: string, options?: PluginLoadOptions): Promise<void> => {\n  return pluginSystem.load(name, options);\n};\n\n/**\n * Get a plugin\n */\nexport const getPlugin = (name: string): PluginRegistration | undefined => {\n  return pluginSystem.getPlugin(name);\n};\n\n/**\n * Get all plugins\n */\nexport const getAllPlugins = (): PluginRegistration[] => {\n  return pluginSystem.getAllPlugins();\n};\n\n/**\n * Get active plugins\n */\nexport const getActivePlugins = (): PluginRegistration[] => {\n  return pluginSystem.getActivePlugins();\n};\n\n/**\n * Unregister a plugin\n */\nexport const unregisterPlugin = async (name: string): Promise<void> => {\n  return pluginSystem.unregister(name);\n};\n\n// ============================================================================\n// Plugin Builder\n// ============================================================================\n\n/**\n * Plugin builder for creating plugins\n */\nexport class PluginBuilder {\n  private metadata: Partial<PluginMetadata> = {};\n  private initFn?: (context: PluginContext) => Promise<void> | void;\n  private destroyFn?: () => Promise<void> | void;\n\n  name(name: string): this {\n    this.metadata.name = name;\n    return this;\n  }\n\n  version(version: string): this {\n    this.metadata.version = version;\n    return this;\n  }\n\n  description(description: string): this {\n    this.metadata.description = description;\n    return this;\n  }\n\n  author(author: string): this {\n    this.metadata.author = author;\n    return this;\n  }\n\n  license(license: string): this {\n    this.metadata.license = license;\n    return this;\n  }\n\n  homepage(url: string): this {\n    this.metadata.homepage = url;\n    return this;\n  }\n\n  dependencies(deps: string[]): this {\n    this.metadata.dependencies = deps;\n    return this;\n  }\n\n  init(fn: (context: PluginContext) => Promise<void> | void): this {\n    this.initFn = fn;\n    return this;\n  }\n\n  destroy(fn: () => Promise<void> | void): this {\n    this.destroyFn = fn;\n    return this;\n  }\n\n  build(): Plugin {\n    const plugin: Plugin = {\n      ...(this.initFn && { init: this.initFn }),\n      ...(this.destroyFn && { destroy: this.destroyFn })\n    };\n\n    // Add metadata only if it has required fields\n    if (this.metadata.name && this.metadata.version && this.metadata.description && this.metadata.author) {\n      plugin.metadata = this.metadata as PluginMetadata;\n    }\n\n    return plugin;\n  }\n}\n\n/**\n * Create a plugin builder\n */\nexport const createPlugin = (): PluginBuilder => {\n  return new PluginBuilder();\n};", "/**\n * Component Registry System\n *\n * Provides centralized management for components:\n * - Component registration and discovery\n * - Lifecycle management\n * - Component lookup and retrieval\n * - Statistics and monitoring\n */\n\nimport type { BaseComponent } from './base.component';\nimport { CleanupManager } from '../core/cleanup-manager';\n\nexport interface ComponentConfig {\n  element: HTMLElement;\n  autoInit?: boolean;\n  autoCleanup?: boolean;\n  [key: string]: any;\n}\n\nexport interface ComponentRegistration {\n  name: string;\n  componentClass: new (config?: any) => BaseComponent;\n  instance?: BaseComponent;\n  config?: ComponentConfig;\n  registeredAt: Date;\n  initializedAt?: Date;\n  destroyedAt?: Date;\n}\n\nexport interface ComponentRegistryStats {\n  totalRegistered: number;\n  totalInitialized: number;\n  totalDestroyed: number;\n  componentsByStatus: {\n    registered: string[];\n    initialized: string[];\n    destroyed: string[];\n  };\n  oldestRegistration?: Date;\n  newestRegistration?: Date;\n}\n\n/**\n * Component Registry class for managing component lifecycle\n */\nexport class ComponentRegistry {\n  private static instance: ComponentRegistry;\n  private components: Map<string, ComponentRegistration> = new Map();\n  private cleanupManager: CleanupManager;\n  private _registryDestroyed: boolean = false;\n\n  private constructor() {\n    this.cleanupManager = CleanupManager.getInstance({\n      autoCleanupOnUnload: true,\n      logCleanupActivity: process.env.NODE_ENV === 'development'\n    });\n\n    // Register cleanup for the registry itself\n    this.cleanupManager.register(() => {\n      this.destroyAll();\n    }, {\n      description: 'Component Registry cleanup',\n      priority: 1 // High priority - clean up components early\n    });\n  }\n\n  /**\n   * Get singleton instance of the registry\n   */\n  public static getInstance(): ComponentRegistry {\n    if (!ComponentRegistry.instance) {\n      ComponentRegistry.instance = new ComponentRegistry();\n    }\n    return ComponentRegistry.instance;\n  }\n\n  /**\n   * Register a component class with the registry\n   */\n  public register(\n    name: string,\n    componentClass: new (config?: any) => BaseComponent,\n    config?: ComponentConfig\n  ): void {\n    if (this._registryDestroyed) {\n      throw new Error('Cannot register components on destroyed registry');\n    }\n\n    if (this.components.has(name)) {\n      throw new Error(`Component with name '${name}' is already registered`);\n    }\n\n    const registration: ComponentRegistration = {\n      name,\n      componentClass,\n      ...(config && { config }),\n      registeredAt: new Date()\n    };\n\n    this.components.set(name, registration);\n\n    // Auto-initialize if configured\n    if (config?.autoInit && config.element) {\n      this.init(name);\n    }\n\n    console.log(`\uD83D\uDCCB Component registered: ${name}`);\n  }\n\n  /**\n   * Initialize a registered component\n   */\n  public async init(name: string): Promise<void> {\n    if (this._registryDestroyed) {\n      throw new Error('Cannot initialize components on destroyed registry');\n    }\n\n    const registration = this.components.get(name);\n    if (!registration) {\n      throw new Error(`Component '${name}' is not registered`);\n    }\n\n    if (registration.instance) {\n      if (registration.instance.isReady()) {\n        console.warn(`\u26A0\uFE0F Component '${name}' is already initialized`);\n        return;\n      }\n      throw new Error(`Component '${name}' has an existing instance in invalid state`);\n    }\n\n    if (!registration.config?.element) {\n      throw new Error(`Component '${name}' cannot be initialized without an element`);\n    }\n\n    try {\n      // Create component instance\n      const config = registration.config!;\n      const component = new registration.componentClass({\n        element: config.element,\n        autoCleanup: config.autoCleanup,\n        cleanupManager: this.cleanupManager,\n        ...config\n      });\n\n      // Initialize the component\n      await component.init();\n\n      // Store the instance\n      registration.instance = component;\n      registration.initializedAt = new Date();\n\n      console.log(`\u2705 Component initialized: ${name}`);\n    } catch (error) {\n      console.error(`\u274C Failed to initialize component '${name}':`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get a component instance by name\n   */\n  public get(name: string): BaseComponent | undefined {\n    const registration = this.components.get(name);\n    return registration?.instance;\n  }\n\n  /**\n   * Get a component registration by name\n   */\n  public getRegistration(name: string): ComponentRegistration | undefined {\n    return this.components.get(name);\n  }\n\n  /**\n   * Check if a component is registered\n   */\n  public isRegistered(name: string): boolean {\n    return this.components.has(name);\n  }\n\n  /**\n   * Check if a component is initialized\n   */\n  public isInitialized(name: string): boolean {\n    const registration = this.components.get(name);\n    return !!registration?.instance?.isReady();\n  }\n\n  /**\n   * Check if a component is destroyed\n   */\n  public isDestroyed(name: string): boolean {\n    const registration = this.components.get(name);\n    return !!registration?.instance?.isComponentDestroyed();\n  }\n\n  /**\n   * Destroy a component instance\n   */\n  public destroy(name: string): void {\n    const registration = this.components.get(name);\n    if (!registration) {\n      console.warn(`\u26A0\uFE0F Cannot destroy unregistered component: ${name}`);\n      return;\n    }\n\n    if (registration.instance) {\n      registration.instance.destroy();\n      registration.destroyedAt = new Date();\n      console.log(`\uD83E\uDDF9 Component destroyed: ${name}`);\n    }\n  }\n\n  /**\n   * Remove a component from the registry\n   */\n  public remove(name: string): void {\n    this.destroy(name);\n    this.components.delete(name);\n    console.log(`\uD83D\uDDD1\uFE0F Component removed from registry: ${name}`);\n  }\n\n  /**\n   * Destroy all registered components\n   */\n  public destroyAll(): void {\n    const names = Array.from(this.components.keys());\n    names.forEach(name => this.destroy(name));\n    console.log(`\uD83E\uDDF9 All components destroyed (${names.length} total)`);\n  }\n\n  /**\n   * Get all registered component names\n   */\n  public getRegisteredNames(): string[] {\n    return Array.from(this.components.keys());\n  }\n\n  /**\n   * Get all initialized component names\n   */\n  public getInitializedNames(): string[] {\n    return Array.from(this.components.entries())\n      .filter(([, registration]) => registration.instance?.isReady())\n      .map(([name]) => name);\n  }\n\n  /**\n   * Get all destroyed component names\n   */\n  public getDestroyedNames(): string[] {\n    return Array.from(this.components.entries())\n      .filter(([, registration]) => registration.instance?.isComponentDestroyed())\n      .map(([name]) => name);\n  }\n\n  /**\n   * Get registry statistics\n   */\n  public getStats(): ComponentRegistryStats {\n    const components = Array.from(this.components.values());\n    const totalRegistered = components.length;\n    const totalInitialized = components.filter(c => c.instance?.isReady()).length;\n    const totalDestroyed = components.filter(c => c.instance?.isComponentDestroyed()).length;\n\n    const registeredDates = components.map(c => c.registeredAt);\n    const oldestRegistration = registeredDates.length > 0 ? new Date(Math.min(...registeredDates.map(d => d.getTime()))) : undefined;\n    const newestRegistration = registeredDates.length > 0 ? new Date(Math.max(...registeredDates.map(d => d.getTime()))) : undefined;\n\n    return {\n      totalRegistered,\n      totalInitialized,\n      totalDestroyed,\n      componentsByStatus: {\n        registered: this.getRegisteredNames(),\n        initialized: this.getInitializedNames(),\n        destroyed: this.getDestroyedNames()\n      },\n      oldestRegistration,\n      newestRegistration\n    };\n  }\n\n  /**\n   * Get detailed component information\n   */\n  public getComponentInfo(name: string): object | undefined {\n    const registration = this.components.get(name);\n    if (!registration) {\n      return undefined;\n    }\n\n    return {\n      name: registration.name,\n      className: registration.componentClass.name,\n      config: registration.config,\n      registeredAt: registration.registeredAt,\n      initializedAt: registration.initializedAt,\n      destroyedAt: registration.destroyedAt,\n      isInitialized: !!registration.instance?.isReady(),\n      isDestroyed: !!registration.instance?.isComponentDestroyed(),\n      stats: registration.instance?.getStats()\n    };\n  }\n\n  /**\n   * Get all component information\n   */\n  public getAllComponentInfo(): object {\n    const info: Record<string, object> = {};\n    for (const name of this.components.keys()) {\n      info[name] = this.getComponentInfo(name) || {};\n    }\n    return info;\n  }\n\n  /**\n   * Find components by class name\n   */\n  public findByClassName(className: string): string[] {\n    return Array.from(this.components.entries())\n      .filter(([, registration]) => registration.componentClass.name === className)\n      .map(([name]) => name);\n  }\n\n  /**\n   * Find components by element\n   */\n  public findByElement(element: HTMLElement): string[] {\n    return Array.from(this.components.entries())\n      .filter(([, registration]) => registration.instance?.getElement() === element)\n      .map(([name]) => name);\n  }\n\n  /**\n   * Destroy the registry itself\n   */\n  public destroyRegistry(): void {\n    this.destroyAll();\n    this.components.clear();\n    this._registryDestroyed = true;\n    console.log('\uD83D\uDC80 Component registry destroyed');\n  }\n\n  /**\n   * Log registry status for debugging\n   */\n  public logStatus(): void {\n    const stats = this.getStats();\n    console.group('\uD83D\uDCCA Component Registry Status');\n    console.log('Total Registered:', stats.totalRegistered);\n    console.log('Total Initialized:', stats.totalInitialized);\n    console.log('Total Destroyed:', stats.totalDestroyed);\n    console.log('Registry Age:', this.getRegistryAge());\n    console.log('Components:', stats.componentsByStatus);\n    console.groupEnd();\n  }\n\n  /**\n   * Get registry age in milliseconds\n   */\n  private getRegistryAge(): number {\n    const names = this.getRegisteredNames();\n    if (names.length === 0) return 0;\n\n    const firstName = names[0];\n    const registration = this.components.get(firstName);\n    if (!registration?.registeredAt) return 0;\n\n    return Date.now() - registration.registeredAt.getTime();\n  }\n}\n\n/**\n * Global registry instance for convenience\n */\nexport const componentRegistry = ComponentRegistry.getInstance();\n\n/**\n * Helper function to register a component\n */\nexport const registerComponent = (\n  name: string,\n  componentClass: new (config?: any) => BaseComponent,\n  config?: ComponentConfig\n): void => {\n  componentRegistry.register(name, componentClass, config);\n};\n\n/**\n * Helper function to get a component\n */\nexport const getComponent = (name: string): BaseComponent | undefined => {\n  return componentRegistry.get(name);\n};\n\n/**\n * Helper function to initialize a component\n */\nexport const initComponent = async (name: string): Promise<void> => {\n  await componentRegistry.init(name);\n};\n\n/**\n * Helper function to destroy a component\n */\nexport const destroyComponent = (name: string): void => {\n  componentRegistry.destroy(name);\n};", "/**\n * Jekyll Blog TypeScript Frontend\n *\n * Architecture:\n * - Modular design with feature-based organization\n * - Type-safe DOM manipulation with null safety\n * - Performance optimized with lazy loading\n * - Error handling with graceful degradation\n */\n\n// Feature modules\nimport { initTheme } from './modules/theme';\nimport type { AppConfig } from './core/types';\n\n// Services\nimport { createConfigService } from './services/config.service';\nimport { initNavigation } from './modules/navigation';\nimport { initCopyCode } from './modules/copy-code';\nimport { initTOC } from './modules/toc';\n// import { initSearch } from './modules/search';\n// import { initShareButtons } from './modules/share';\n\n// Core infrastructure\nimport { CleanupManager } from './core/cleanup-manager';\nimport { registerService, getService, serviceFactory } from './core/service-factory';\nimport { pluginSystem } from './core/plugin-system';\nimport { componentRegistry } from './components/component-registry';\nimport { performanceMonitor, initPerformanceMonitoring } from './core/performance-monitor';\nimport { appStateManager } from './core/app-state';\n\n// Utilities\nimport { ready as domReady } from './modules/utils/dom';\n// import { initErrorHandling, initPerformanceMonitoring } from './modules/utils/errors';\n\n// AppConfig interface is now imported from @/core/types\n\n/**\n * Load external CSS files\n */\nconst loadExternalCSS = (): void => {\n  const cssFiles = [\n    '/assets/css/theme.css',\n    '/assets/css/components.css',\n    '/assets/css/utilities.css'\n  ];\n\n  cssFiles.forEach(cssFile => {\n    // Check if CSS file is already loaded\n    const existingLink = document.querySelector(`link[href=\"${cssFile}\"]`);\n    if (existingLink) {\n      return;\n    }\n\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = cssFile;\n    link.media = 'screen';\n\n    // Add error handling\n    link.onerror = () => {\n      console.warn(`\u26A0\uFE0F Failed to load CSS file: ${cssFile}`);\n    };\n\n    link.onload = () => {\n      console.log(`\u2705 CSS file loaded: ${cssFile}`);\n    };\n\n    document.head.appendChild(link);\n  });\n\n  console.log('\uD83C\uDFA8 External CSS files loading initiated');\n};\n\n/**\n * Get configuration using the service factory\n */\nconst getAppConfig = (): AppConfig => {\n  const configService = getService('config');\n  const siteConfig = configService.getSiteConfig();\n\n  // Convert SiteConfig to AppConfig for backward compatibility\n  return {\n    theme: siteConfig.theme,\n    searchEnabled: siteConfig.features.searchEnabled,\n    tocEnabled: siteConfig.features.tocEnabled,\n    copyCodeEnabled: siteConfig.features.copyCodeEnabled,\n    shareButtonsEnabled: siteConfig.features.shareButtonsEnabled,\n    isPost: siteConfig.isPost,\n    isHomePage: siteConfig.isHomePage,\n    environment: siteConfig.environment\n  };\n};\n\n/**\n * Initialize application with error handling\n */\nconst initializeApp = async (): Promise<void> => {\n  const config = getAppConfig();\n\n  // Mark initialization start\n  performanceMonitor.mark('app-init-start');\n\n  try {\n    console.log('\uD83D\uDE80 Jekyll TypeScript Frontend Starting...');\n    console.log('\uD83D\uDCCA Config:', config);\n\n    // Load external CSS files\n    loadExternalCSS();\n\n    // Initialize core infrastructure\n    const cleanupManager = CleanupManager.getInstance({\n      autoCleanupOnUnload: true,\n      logCleanupActivity: process.env.NODE_ENV === 'development'\n    });\n\n    console.log('\uD83E\uDDF9 Cleanup manager initialized');\n\n    // Register configuration service with factory\n    registerService('config', createConfigService, true);\n\n    // Register plugin system with factory\n    registerService('plugins', () => pluginSystem, true);\n\n    // Register component registry with factory\n    registerService('components', () => componentRegistry, true);\n\n    // Initialize configuration service\n    const configService = getService('config');\n    const siteConfig = configService.getSiteConfig();\n\n    console.log('\uD83D\uDCCB Configuration service initialized with factory pattern');\n    console.log('\uD83D\uDCCA Site config:', {\n      theme: siteConfig.theme,\n      environment: siteConfig.environment,\n      features: siteConfig.features,\n      isPost: siteConfig.isPost\n    });\n\n    // Initialize state management system\n    console.log('\uD83D\uDDC4\uFE0F State management system initialized');\n\n    // Make app state manager globally available\n    if (typeof window !== 'undefined') {\n      (window as any).__APP_STATE_MANAGER__ = appStateManager;\n    }\n\n    // Register state manager with service factory\n    registerService('stateManager', () => appStateManager, true);\n\n    console.log('\uD83D\uDCCA App state metrics:', appStateManager.getMetrics());\n\n    // Initialize plugin system\n    console.log('\uD83D\uDD0C Plugin system initialized');\n    console.log('\uD83D\uDCCA Plugin system stats:', pluginSystem.getStats());\n\n    // Initialize component registry\n    console.log('\uD83D\uDCCB Component registry initialized');\n    console.log('\uD83D\uDCCA Component registry stats:', componentRegistry.getStats());\n\n    // initErrorHandling();\n    // initPerformanceMonitoring();\n\n    // Initialize features based on configuration\n    initTheme(config.theme);\n    initNavigation();\n\n    if (config.copyCodeEnabled) {\n      await initCopyCode();\n    }\n\n    if (config.tocEnabled && config.isPost) {\n      await initTOC();\n    }\n\n    if (config.searchEnabled) {\n      // await initSearch();\n      console.log('\uD83D\uDD0D Search functionality not implemented yet');\n    }\n\n    if (config.shareButtonsEnabled && config.isPost) {\n      // await initShareButtons();\n      console.log('\uD83D\uDCE4 Share buttons not implemented yet');\n    }\n\n    // Mark as ready\n    document.body.classList.add('js-enabled');\n    document.body.classList.remove('js-loading');\n\n    // Mark initialization complete\n    performanceMonitor.mark('app-init-end');\n    const initTime = performanceMonitor.measure('app-init', 'app-init-start', 'app-init-end');\n    performanceMonitor.recordMetric('app-initialization', initTime);\n\n    // Initialize performance monitoring\n    initPerformanceMonitoring();\n\n    console.log('\u2705 Jekyll TypeScript frontend initialized successfully (Phase 2 complete)');\n    console.log(`\u26A1 Initialization time: ${initTime.toFixed(2)}ms`);\n\n    // Log statistics in development\n    if (process.env.NODE_ENV === 'development') {\n      setTimeout(() => {\n        const cleanupStats = cleanupManager.getStats();\n        console.log('\uD83D\uDCCA Cleanup Manager Stats:', cleanupStats);\n\n        const configStats = configService.getCacheStats();\n        console.log('\uD83D\uDCCA Configuration Service Stats:', configStats);\n\n        const serviceStats = serviceFactory.getStats();\n        console.log('\uD83D\uDCCA Service Factory Stats:', serviceStats);\n\n        const plugins = getService('plugins');\n        const pluginStats = plugins.getStats();\n        console.log('\uD83D\uDCCA Plugin System Stats:', pluginStats);\n\n        const components = getService('components');\n        const componentStats = components.getStats();\n        console.log('\uD83D\uDCCA Component Registry Stats:', componentStats);\n      }, 100);\n    }\n\n  } catch (error) {\n    console.error('\u274C Failed to initialize app:', error);\n\n    // Fallback behavior\n    document.body.classList.add('js-fallback');\n    document.body.classList.remove('js-loading');\n\n    // Still enable basic functionality\n    try {\n      initTheme(config.theme);\n      initNavigation();\n    } catch (fallbackError) {\n      console.error('\u274C Even fallback initialization failed:', fallbackError);\n    }\n  }\n};\n\n/**\n * Application bootstrap\n */\ndomReady(() => {\n  document.body.classList.add('js-loading');\n  initializeApp();\n});\n\n// Export for external use and testing\nexport { initializeApp, getAppConfig };\n"],
  "mappings": "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",
  "names": ["_a", "e", "_a", "performance", "getCurrentTheme", "configService"]
}
